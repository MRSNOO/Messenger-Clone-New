[{"D:\\ReactAuthFirebase\\react-auth\\src\\components\\chat\\HomePage.js":"1","D:\\ReactAuthFirebase\\react-auth\\src\\actions\\user.actions.js":"2","D:\\ReactAuthFirebase\\react-auth\\src\\components\\auth\\Signup.js":"3","D:\\ReactAuthFirebase\\react-auth\\src\\components\\contexts\\AuthContext.js":"4","D:\\ReactAuthFirebase\\react-auth\\src\\components\\todos\\Todo.js":"5","D:\\ReactAuthFirebase\\react-auth\\src\\index.js":"6","D:\\ReactAuthFirebase\\react-auth\\src\\components\\auth\\Login.js":"7","D:\\ReactAuthFirebase\\react-auth\\src\\components\\chat\\header\\header.js":"8","D:\\ReactAuthFirebase\\react-auth\\src\\components\\todos\\index.js":"9","D:\\ReactAuthFirebase\\react-auth\\src\\services\\firebase.js":"10","D:\\ReactAuthFirebase\\react-auth\\src\\reducers\\index.js":"11","D:\\ReactAuthFirebase\\react-auth\\src\\actions\\constants.js":"12","D:\\ReactAuthFirebase\\react-auth\\src\\components\\auth\\Dashboard.js":"13","D:\\ReactAuthFirebase\\react-auth\\src\\components\\auth\\ForgotPassword.js":"14","D:\\ReactAuthFirebase\\react-auth\\src\\components\\auth\\PrivateRoute.js":"15","D:\\ReactAuthFirebase\\react-auth\\src\\actions\\auth.actions.js":"16","D:\\ReactAuthFirebase\\react-auth\\src\\reducers\\auth.reducer.js":"17","D:\\ReactAuthFirebase\\react-auth\\src\\components\\auth\\UpdateProfile.js":"18","D:\\ReactAuthFirebase\\react-auth\\src\\reducers\\user.reducer.js":"19","D:\\ReactAuthFirebase\\react-auth\\src\\App.js":"20","D:\\ReactAuthFirebase\\react-auth\\src\\actions\\index.js":"21","D:\\ReactAuthFirebase\\react-auth\\src\\store\\index.js":"22"},{"size":49850,"mtime":1609662362193,"results":"23","hashOfConfig":"24"},{"size":3742,"mtime":1609171936203,"results":"25","hashOfConfig":"24"},{"size":3834,"mtime":1609662330852,"results":"26","hashOfConfig":"24"},{"size":1518,"mtime":1606993657514,"results":"27","hashOfConfig":"24"},{"size":1672,"mtime":1606756586159,"results":"28","hashOfConfig":"24"},{"size":642,"mtime":1607007385669,"results":"29","hashOfConfig":"24"},{"size":2672,"mtime":1609601209167,"results":"30","hashOfConfig":"24"},{"size":2198,"mtime":1609612266733,"results":"31","hashOfConfig":"24"},{"size":1990,"mtime":1606756362572,"results":"32","hashOfConfig":"24"},{"size":650,"mtime":1608648286455,"results":"33","hashOfConfig":"24"},{"size":250,"mtime":1607005912644,"results":"34","hashOfConfig":"24"},{"size":287,"mtime":1608820309398,"results":"35","hashOfConfig":"24"},{"size":15262,"mtime":1609662321280,"results":"36","hashOfConfig":"24"},{"size":1846,"mtime":1609601308152,"results":"37","hashOfConfig":"24"},{"size":654,"mtime":1606708844866,"results":"38","hashOfConfig":"24"},{"size":110,"mtime":1606989467204,"results":"39","hashOfConfig":"24"},{"size":1409,"mtime":1607005468576,"results":"40","hashOfConfig":"24"},{"size":4246,"mtime":1609661688814,"results":"41","hashOfConfig":"24"},{"size":1108,"mtime":1609072174995,"results":"42","hashOfConfig":"24"},{"size":1432,"mtime":1609601627952,"results":"43","hashOfConfig":"24"},{"size":62,"mtime":1607005248840,"results":"44","hashOfConfig":"24"},{"size":219,"mtime":1606985572878,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":57,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48"},"6lfylo",{"filePath":"49","messages":"50","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"57"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"62"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"69"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"69"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"78","messages":"79","errorCount":0,"warningCount":32,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"85"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"85"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"91","messages":"92","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"96","messages":"97","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\ReactAuthFirebase\\react-auth\\src\\components\\chat\\HomePage.js",["102","103","104","105","106","107","108","109","110","111","112","113","114","115","116","117","118","119","120","121","122","123","124","125","126","127","128","129","130","131","132","133","134","135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158"],"import React, { useEffect, useState, useRef } from 'react';\r\nimport { Button, Dropdown, DropdownButton } from 'react-bootstrap';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { getRealTimeConversations, getRealTimeUsers, createMessage, getRealTimeConversationsGroups, createMessageGroup } from '../../actions';\r\nimport { useAuth } from '../contexts/AuthContext';\r\nimport Header from './header/header';\r\nimport Picker from 'emoji-picker-react';\r\nimport { makeStyles } from '@material-ui/core';\r\nimport Modal from '@material-ui/core/Modal';\r\nimport { db, storage } from '../../services/firebase';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faCoffee, faReply, faSmile, faPaperPlane, faTimesCircle, faPlus, faInfoCircle } from '@fortawesome/free-solid-svg-icons'\r\nimport './HomePage.css';\r\nimport firebase from \"firebase\";\r\nimport emoji from \"emoji-dictionary\";\r\nimport { Link, useHistory } from 'react-router-dom';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    position: \"absolute\",\r\n    bottom: \"10%\",\r\n    right: 250,\r\n    width: \"auto\",\r\n    backgroundColor: theme.palette.background.paper,\r\n    border: '2px solid #000',\r\n    padding: theme.spacing(2, 4, 3),\r\n  },\r\n  root3: {\r\n    flexGrow: 1,\r\n    minWidth: 300,\r\n  },\r\n  modal3: {\r\n    display: 'flex',\r\n    padding: theme.spacing(1),\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n\r\n  },\r\n  paper3: {\r\n    width: 500,\r\n    height: 500,\r\n    alignItems: \"center\",\r\n    backgroundColor: theme.palette.background.paper,\r\n    border: '2px solid #000',\r\n    boxShadow: theme.shadows[5],\r\n    padding: theme.spacing(2, 4, 3),\r\n  },\r\n  modal2: {\r\n    display: 'flex',\r\n    padding: theme.spacing(1),\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n  },\r\n  paper2: {\r\n    width: 500,\r\n    height: 500,\r\n    alignItems: \"center\",\r\n    backgroundColor: theme.palette.background.paper,\r\n    border: '2px solid #000',\r\n    boxShadow: theme.shadows[5],\r\n    padding: theme.spacing(2, 4, 3),\r\n  },\r\n  paper4: {\r\n    width: 500,\r\n    height: 500,\r\n    // alignItems: \"center\",\r\n    backgroundColor: theme.palette.background.paper,\r\n    border: '2px solid #000',\r\n    boxShadow: theme.shadows[5],\r\n    padding: theme.spacing(2, 4, 3),\r\n  },\r\n  paper5: {\r\n    width: \"100%\",\r\n    height: \"70%\",\r\n    alignItems: \"center\",\r\n    backgroundColor: theme.palette.background.paper,\r\n    border: '2px solid #000',\r\n    boxShadow: theme.shadows[5],\r\n    padding: theme.spacing(2, 4, 3),\r\n  },\r\n  paper6: {\r\n    height: 70,\r\n    width: 150,\r\n    backgroundColor: theme.palette.background.paper,\r\n    border: '2px solid #000',\r\n    boxShadow: theme.shadows[5],\r\n    padding: theme.spacing(2, 4, 3),\r\n    position: \"relative\"\r\n  }\r\n}));\r\n\r\n\r\nconst User = (props) => {\r\n  const [profileImageUrl, setProfileImageUrl] = useState(\"\")\r\n  const [invalidate5, setInvalidate5] = useState(true)\r\n  const { user, onClick, id } = props\r\n\r\n  useEffect(() => {\r\n    if (id) {\r\n      db.collection(\"users\").doc(id).get().then((doc) => {\r\n        if (doc.data().profileImage) {\r\n          // console.log(doc.data().profileImage)\r\n          setProfileImageUrl(doc.data().profileImage)\r\n        }\r\n      })\r\n      setInvalidate5(false)\r\n    }\r\n  }, [id, invalidate5]);\r\n  return (\r\n    <div onClick={() => onClick(user)} className=\"displayName\">\r\n      <div className=\"displayPic\">\r\n        <img src={profileImageUrl} alt=\"\" />\r\n      </div>\r\n      <div style={{ display: \"flex\", flex: 1, justifyContent: 'space-between', margin: '0 10px' }}>\r\n        <span style={{ fontWeight: 500 }}>{user.firstName} {user.lastName}</span>\r\n        <span className={user.isOnline ? \"onlineStatus\" : \"onlineStatus off\"}>\r\n        </span>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst UserGroups = (props) => {\r\n  const { groupImageUrl, group, userGroups, onClick, userDocIds, id } = props\r\n  const [profileImageUrl, setProfileImageUrl] = useState(\"\")\r\n  const [invalidate5, setInvalidate5] = useState(true)\r\n\r\n  return (\r\n    <div onClick={() => onClick(group)} className=\"displayName\">\r\n      <div className=\"displayPic\">\r\n        <img src={groupImageUrl} alt=\"\" />\r\n      </div>\r\n      <div style={{ display: \"flex\", flex: 1, justifyContent: 'space-between', margin: '0 10px' }}>\r\n        <span style={{ fontWeight: 500 }}>{userGroups.conversationName}</span>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\nconst HomePage = (props) => {\r\n  const dispatch = useDispatch()\r\n  const { currentUser, logout } = useAuth()\r\n  const [invalidate, setInvalidate] = useState(true)\r\n  const [invalidate2, setInvalidate2] = useState(true)\r\n  const [invalidate4, setInvalidate4] = useState(true)\r\n  const [invalidate5, setInvalidate5] = useState(true)\r\n  const [chatStarted, setChatStarted] = useState(false)\r\n  const [chatUser, setChatUser] = useState('')\r\n  const [message, setMessage] = useState('')\r\n  const [userUid, setUserUid] = useState('')\r\n  const [chosenEmoji, setChosenEmoji] = useState(null);\r\n  const [open, setOpen] = useState(false)\r\n  const [docId, setDocId] = useState() //current User Firebase document id\r\n  const [friendList, setFriendList] = useState([]) //friendlist in client side\r\n  const [newCurrentFriendList, setNewCurrentFriendList] = useState([]) //get all friends from firebase\r\n  const [replyMessage, setReplyMessage] = useState(\"\")\r\n  const [open2, setOpen2] = useState(false) //create new Group\r\n  const [converName, setConverName] = useState(\"\")\r\n  const [friendListName, setFriendListName] = useState([])\r\n  const [tagInput, setTagInput] = useState(\"\")\r\n  const [tags, setTags] = useState([])\r\n  const [tagsId, setTagsId] = useState([docId])\r\n  const [selectedValue, setSelectedValue] = useState(\"\")\r\n  const [groups, setGroups] = useState([])\r\n  const [chatGroup, setChatGroup] = useState(false)\r\n  const [userDocIds, setUserDocIds] = useState([])\r\n  const [currentConversationName, setCurrentConversationName] = useState(\"\")\r\n  const [currentConversationUsernames, setCurrentConversationUsernames] = useState([])\r\n  const [currentGroupId, setCurrentGroupId] = useState(\"\")\r\n  const [profileImageUrl, setProfileImageUrl] = useState(\"\")\r\n  const [invalidate6, setInvalidate6] = useState(true)\r\n  const [open3, setOpen3] = useState(false) //add member to groups\r\n  const [groupInfo, setGroupInfo] = useState([])\r\n  const [invalidate7, setInvalidate7] = useState(false)\r\n  const [open4, setOpen4] = useState(false) //remove member from groups\r\n  const [open5, setOpen5] = useState(false)\r\n  const allInputs = { imgUrl: '' }\r\n  const [imageAsFile, setImageAsFile] = useState('')\r\n  const [imageAsUrl, setImageAsUrl] = useState(allInputs)\r\n  const [groupImageUrl, setGroupProfileImageUrl] = useState(\"\")\r\n  const [invalidate8, setInvalidate8] = useState(true)\r\n  const [open6, setOpen6] = useState(false)\r\n  const [currentMessageEmoji, setCurrentMessageEmoji] = useState(false)\r\n  const [selectedEmoji, setSelectedEmoji] = useState(\"\")\r\n  const [selectedEmojiOnDatabase, setSelectedEmojiOnDatabase] = useState(\"\")\r\n  const [selectedEmojis, setSelectedEmojis] = useState({}) //get the emoji object on database\r\n  const [currentMessageEmojiGroup, setCurrentMessageEmojiGroup] = useState(\"\")\r\n  const [currentKey, setCurrentKey] = useState(\"\")\r\n  const [invalidate9, setInvalidate9] = useState(false)\r\n  const [selectedMember, setSelectedMember] = useState(false)\r\n  const [error, setError] = useState(\"\")\r\n  const [open9, setOpen9] = useState(false) //function modal\r\n  const [open10, setOpen10] = useState(false) //info modal\r\n\r\n  const history = useHistory()\r\n  const classes = useStyles()\r\n  const classesModal = useStyles()\r\n\r\n  const messageEl = useRef(null);\r\n  const user = useSelector(state => state.user)\r\n\r\n  function removeDuplicates(array) {\r\n    array.splice(0, array.length, ...(new Set(array)))\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (invalidate2) {\r\n      db.collection(\"users\").where(\"uid\", \"==\", currentUser.uid)\r\n        .onSnapshot((snapShot) => {\r\n          snapShot.docs.map((doc) => setDocId(doc.id))\r\n          setInvalidate2(false)\r\n        })\r\n    }\r\n  }, [invalidate2]);\r\n\r\n  useEffect(() => {\r\n    if (docId) {\r\n      db.collection(\"users\").doc(docId).get().then((doc) => {\r\n        if (doc.data().friendList) {\r\n          setFriendList(doc.data().friendList)\r\n        }\r\n      })\r\n      setInvalidate4(false)\r\n    }\r\n  }, [docId, invalidate4]);\r\n\r\n  useEffect(() => {\r\n    let newFriendLists = []\r\n    let newFriendListName = []\r\n    db.collection(\"users\").get().then((data) => {\r\n      data.docs.map((doc) => {\r\n        if (friendList.includes(doc.id)) {\r\n          newFriendLists.push({ id: doc.id, data: doc.data() })\r\n          newFriendListName.push(`${doc.data().firstName + doc.data().lastName}`)\r\n        }\r\n      })\r\n      setNewCurrentFriendList(newFriendLists)\r\n      setFriendListName(newFriendListName)\r\n    })\r\n  }, [friendList]);\r\n\r\n  useEffect(() => {\r\n    if (messageEl) {\r\n      messageEl.current.addEventListener('DOMNodeInserted', event => {\r\n        const { currentTarget: target } = event;\r\n        target.scroll({ top: target.scrollHeight, behavior: 'smooth' });\r\n      });\r\n    }\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    if (invalidate) {\r\n      dispatch(getRealTimeUsers(currentUser.uid))\r\n        .then((unsubscribe) => {\r\n          setInvalidate(false)\r\n          return unsubscribe\r\n        })\r\n        .catch((err) => {\r\n          console.log(err)\r\n        })\r\n    }\r\n  }, [invalidate]);\r\n\r\n  useEffect(() => {\r\n    db.collection(\"groups\").onSnapshot((data) => {\r\n      setGroups(data.docs.map((doc) => ({ id: doc.id, data: doc.data() })))\r\n    })\r\n    setInvalidate5(false)\r\n  }, [invalidate5]);\r\n\r\n  useEffect(() => {\r\n    if (docId && invalidate6) {\r\n      db.collection(\"users\").doc(docId).get().then((doc) => {\r\n        if (doc.data().profileImage) {\r\n          // console.log(doc.data().profileImage)\r\n          setProfileImageUrl(doc.data().profileImage)\r\n        }\r\n      })\r\n      setInvalidate6(false)\r\n    }\r\n  }, [docId, invalidate6]);\r\n\r\n  useEffect(() => {\r\n    removeDuplicates(groups)\r\n  }, [groups])\r\n\r\n  useEffect(() => {\r\n    if (currentGroupId) {\r\n      db.collection(\"groups\").doc(currentGroupId).get().then((doc) => {\r\n        if (doc.data().groupImage) {\r\n          setGroupProfileImageUrl(doc.data().groupImage)\r\n        }\r\n      })\r\n      setInvalidate8(false)\r\n    }\r\n  }, [currentGroupId, invalidate8, imageAsUrl]);\r\n\r\n  const initChat = (user) => {\r\n    setChatStarted(true)\r\n    setChatGroup(false)\r\n    setChatUser(`${user.firstName} ${user.lastName}`)\r\n    setUserUid(user.uid)\r\n    dispatch(getRealTimeConversations({ uid_1: currentUser.uid, uid_2: user.uid }))\r\n    // console.log(user)\r\n  }\r\n\r\n  const initGroup = (group) => {\r\n    dispatch(getRealTimeConversationsGroups(group.data))\r\n    setCurrentConversationName(group.data.conversationName)\r\n    setCurrentConversationUsernames(group.data.conversationMembers)\r\n    setChatUser(`${group.data.conversationName}`)\r\n    setUserDocIds(group.data.user_uids)\r\n    setCurrentGroupId(group.id)\r\n    setChatStarted(true)\r\n    setChatGroup(true)\r\n  }\r\n\r\n  const sendMessage = (e) => {\r\n    e.preventDefault()\r\n    const messageObject = {\r\n      user_uid_1: currentUser.uid, //dùng uid\r\n      user_uid_2: userUid,\r\n      message: message,\r\n      haveReply: replyMessage ? true : false,\r\n      replyMessage: replyMessage\r\n    }\r\n    if (message) {\r\n      dispatch(createMessage(messageObject))\r\n        .then(() => {\r\n          setMessage('')\r\n        })\r\n    }\r\n    setReplyMessage(\"\")\r\n  }\r\n\r\n  const sendMessageConversation = (e) => {\r\n    e.preventDefault()\r\n    const messageObject = {\r\n      user_uids: userDocIds,\r\n      message: message,\r\n      sender: docId, // dùng docId\r\n      haveReply: replyMessage ? true : false,\r\n      replyMessage: replyMessage,\r\n      conversationName: currentConversationName,\r\n      currentConversationUsernames: currentConversationUsernames,\r\n      profileImage: profileImageUrl,\r\n      senderName: currentUser.displayName\r\n    }\r\n    // console.log(messageObject)\r\n    if (message) {\r\n      dispatch(createMessageGroup(messageObject))\r\n        .then(() => {\r\n          setMessage('')\r\n        })\r\n    }\r\n    setReplyMessage(\"\")\r\n  }\r\n\r\n  const handleOnKeyDown = (e) => {\r\n    if (e.key === 'Enter' && !chatGroup) {\r\n      sendMessage(e)\r\n    }\r\n    else if (e.key === 'Enter' && chatGroup) {\r\n      sendMessageConversation(e)\r\n    }\r\n  }\r\n\r\n  const onEmojiClick = (event, emojiObject) => {\r\n    setChosenEmoji(emojiObject);\r\n    setMessage(message + emojiObject.emoji)\r\n  };\r\n\r\n  const handleReplyMess = (id) => {\r\n    // console.log(\"reply\")\r\n    db.collection(\"conversations\").doc(id).get().then((doc) => {\r\n      setReplyMessage(doc.data().message)\r\n    })\r\n  }\r\n\r\n  const handleReplyMessGroup = (id) => {\r\n    db.collection(\"conversationsGroup\").doc(id).get().then((doc) => {\r\n      setReplyMessage(doc.data().message)\r\n    })\r\n  }\r\n\r\n  const handleExitReply = () => {\r\n    setReplyMessage(\"\")\r\n  }\r\n\r\n  const handleCreateGroupModal = (e) => {\r\n    e.preventDefault()\r\n    setOpen2(true)\r\n    setConverName(\"\")\r\n    setTagsId([docId])\r\n    setTags([currentUser.displayName])\r\n  }\r\n\r\n  const removeTag = (i) => {\r\n    const newTags = [...tags]\r\n    newTags.splice(i, 1)\r\n    const newTagsData = newCurrentFriendList.filter((friend) => newTags.includes(friend.data.firstName + friend.data.lastName))\r\n    let newTagsId = newTagsData.map((tag) => tag.id)\r\n    if (!newTagsId.includes(docId)) {\r\n      newTagsId.push(docId)\r\n    }\r\n    setTagsId(newTagsId)\r\n    setTags(newTags)\r\n  }\r\n\r\n  const removeTagGroup = (i) => {\r\n    const newTags = [...tags]\r\n    newTags.splice(i, 1)\r\n    const newTagsData = newCurrentFriendList.filter((friend) => newTags.includes(friend.data.firstName + friend.data.lastName))\r\n    let newTagsId = newTagsData.map((tag) => tag.id)\r\n    setTagsId(newTagsId)\r\n    setTags(newTags)\r\n  }\r\n\r\n  const handleSelect = (e) => {\r\n    const val = e.target.value\r\n    if (e.key === \"Enter\" && val && friendListName.includes(val)) {\r\n      if (tags.find(tag => tag.toLowerCase() === val.toLowerCase())) {\r\n        return;\r\n      }\r\n      setTags([...tags, val]);\r\n      const idOfNewMember = newCurrentFriendList.find((friend) => friend.data.firstName + friend.data.lastName === val).id\r\n      if (!tagsId.includes(docId)) {\r\n        setTagsId([...tagsId, docId])\r\n      }\r\n      if (!tagsId.includes(idOfNewMember)) {\r\n        setTagsId([...tagsId, idOfNewMember])\r\n      }\r\n      setTagInput(\"\");\r\n    }\r\n    if (e.key === 'Backspace' && !val) {\r\n      if (tags[tags.length - 1] != currentUser.displayName) {\r\n        removeTag(tags.length - 1);\r\n      }\r\n      //remove id from tagsId\r\n    }\r\n  }\r\n\r\n  const handleSelectFromDataList = (e) => {\r\n    // console.log(\"selected\")\r\n    setSelectedMember(true)\r\n  }\r\n\r\n  const createNewConversationGroup = async (e) => {\r\n    if (!tags.includes(currentUser.displayName)) {\r\n      setTags([...tags, currentUser.displayName])\r\n    }\r\n    await db.collection(\"groups\").add({\r\n      user_uids: tagsId,\r\n      conversationName: converName,\r\n      createdAt: new Date(),\r\n      conversationMembers: tags,\r\n      adminGroup: docId\r\n    })\r\n    setOpen2(false)\r\n  }\r\n\r\n  const handleOpenModalAdd = (e) => {\r\n    e.preventDefault()\r\n    setOpen3(true)\r\n    setTagsId([])\r\n    setTags([])\r\n  }\r\n\r\n  const handleOpenModalRemove = (e) => {\r\n    e.preventDefault()\r\n    setOpen4(true)\r\n  }\r\n\r\n  const addMemberToGroups = async (group) => {\r\n    await db.collection(\"groups\").doc(currentGroupId).update({\r\n      conversationMembers: currentConversationUsernames && currentConversationUsernames.concat(tags)\r\n    })\r\n\r\n    await db.collection(\"groups\").doc(currentGroupId).update({\r\n      user_uids: userDocIds && userDocIds.concat(tagsId)\r\n    })\r\n    // await initGroup(group)\r\n    setOpen3(false)\r\n    setInvalidate7(true)\r\n  }\r\n\r\n  const handleRemoveMember = async (member) => {\r\n    const idRemoveMember = newCurrentFriendList && newCurrentFriendList.find((friend) => (friend.data.firstName + friend.data.lastName) === member).id\r\n    await db.collection(\"groups\").doc(currentGroupId).update({\r\n      conversationMembers: currentConversationUsernames && currentConversationUsernames.filter((groupUser) => groupUser != member)\r\n    })\r\n\r\n    await db.collection(\"groups\").doc(currentGroupId).update({\r\n      user_uids: userDocIds && userDocIds.filter((userDocId) => userDocId != idRemoveMember)\r\n    })\r\n    setOpen4(false)\r\n  }\r\n\r\n  const handleAddGroupImage = (e) => {\r\n    e.preventDefault()\r\n    setOpen5(true)\r\n  }\r\n\r\n  const handleImageAsFile = (e) => {\r\n    const image = e.target.files[0]\r\n    setImageAsFile(imageAsFile => image)\r\n  }\r\n\r\n  const handleFirebaseUploadGroup = (e) => {\r\n    e.preventDefault()\r\n    // console.log(\"Start to upload\")\r\n    if (imageAsFile === '') {\r\n      // console.log(`not an image, the image file is type of ${typeof (imageAsFile)}`)\r\n    }\r\n    const uploadTask = storage.ref(`/images/${imageAsFile.name}`).put(imageAsFile)\r\n    uploadTask.on(\"state_changed\", (snapShot) => {\r\n    }, (err) => {\r\n      console.log(err)\r\n    }, () => {\r\n      storage.ref('images').child(imageAsFile.name).getDownloadURL()\r\n        .then(fireBaseUrl => {\r\n          setImageAsUrl(prevObject => ({ ...prevObject, imgUrl: fireBaseUrl }))\r\n          db.collection(\"groups\").doc(currentGroupId).update({\r\n            groupImage: fireBaseUrl\r\n          })\r\n        })\r\n    })\r\n  }\r\n\r\n  const handleShowEmojis = (e, id) => {\r\n    setOpen6(!open6)\r\n    setCurrentMessageEmoji(e.currentTarget.id)\r\n\r\n    if (chatGroup) {\r\n      db.collection(\"conversationsGroup\").doc(id).onSnapshot((doc) => {\r\n        if (doc.data().emojiMultiple) {\r\n          // console.log(doc.data().emojiMultiple)\r\n          setSelectedEmojis(doc.data().emojiMultiple)\r\n        }\r\n      })\r\n    }\r\n  }\r\n\r\n  const handleReaction = async (e, id) => {\r\n    e.preventDefault()\r\n    setSelectedEmoji(e.currentTarget.textContent)\r\n    const emojiSelected = e.currentTarget.textContent\r\n    await db.collection(\"conversations\").doc(id).update({\r\n      emojiSingle: emojiSelected == selectedEmojiOnDatabase ? \"\" : emojiSelected\r\n    })\r\n    await db.collection(\"conversations\").doc(id).onSnapshot((doc) => {\r\n      if (doc) {\r\n        setSelectedEmojiOnDatabase(doc.data().emojiSingle)\r\n      }\r\n    })\r\n    setOpen6(false)\r\n  }\r\n\r\n  const handleReactionGroup = async (e, id) => { //id là id conver\r\n    e.preventDefault()\r\n    const emojiSelected = e.currentTarget.textContent\r\n    setCurrentMessageEmojiGroup(id)\r\n    let check = false\r\n    db.collection(\"conversationsGroup\").doc(id).onSnapshot((doc) => {\r\n      if (doc.data().emojiMultiple) {\r\n        // console.log(doc.data().emojiMultiple)\r\n        setSelectedEmojis(doc.data().emojiMultiple)\r\n      }\r\n    })\r\n\r\n    if (!selectedEmojis.hasOwnProperty(emojiSelected)) {\r\n      // setInvalidate9(!invalidate9)\r\n      let newEmojiMultiple2 = Object.assign({}, selectedEmojis)\r\n      Object.keys(newEmojiMultiple2).map(function (key, index) {\r\n        if (newEmojiMultiple2[key].includes(docId)) {\r\n          const newCurrentEmoji = newEmojiMultiple2[key].filter((id) => id != docId)\r\n          newEmojiMultiple2[key] = newCurrentEmoji\r\n        }\r\n      })\r\n\r\n      let newArray = []\r\n      newArray.push(docId)\r\n      newEmojiMultiple2[emojiSelected] = newArray\r\n      await db.collection(\"conversationsGroup\").doc(id).update({\r\n        emojiMultiple: newEmojiMultiple2\r\n      })\r\n    }\r\n    else {\r\n      // console.log(\"contained emoji\")\r\n      let newEmojiMultiple = Object.assign({}, selectedEmojis)\r\n\r\n      Object.keys(newEmojiMultiple).map(function (key, index) {\r\n        if (newEmojiMultiple[key].includes(docId)) {\r\n          if (key == emojiSelected) {\r\n            check = true\r\n          }\r\n          const newCurrentEmoji = newEmojiMultiple[key].filter((id) => id != docId)\r\n          newEmojiMultiple[key] = newCurrentEmoji\r\n        }\r\n      })\r\n\r\n      // console.log(newEmojiMultiple)\r\n      if (!newEmojiMultiple[emojiSelected].includes(docId) && !check) {\r\n        // console.log(\"not have yet\")\r\n        newEmojiMultiple[emojiSelected].push(docId)\r\n      }\r\n\r\n      await db.collection(\"conversationsGroup\").doc(id).update({\r\n        emojiMultiple: newEmojiMultiple\r\n      })\r\n    }\r\n    setOpen6(false)\r\n  }\r\n\r\n  async function handleLogout(e) {\r\n    setError('')\r\n\r\n    try {\r\n      await logout()\r\n        .then(() => {\r\n          db.collection(\"users\").doc(docId).update({\r\n            isOnline: false\r\n          })\r\n        })\r\n      await localStorage.clear()\r\n      history.push('/login')\r\n    }\r\n    catch {\r\n      setError(\"Failed to log out\")\r\n    }\r\n  }\r\n\r\n  const openFunctionModal = (e) => {\r\n    setOpen9(true)\r\n  }\r\n\r\n  const openInfoModal = (e) => {\r\n    setOpen10(true)\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Header />\r\n      <div className=\"containers\">\r\n        <div className=\"listOfUsers\">\r\n          <h3>Conversations</h3>\r\n          <div>\r\n            {\r\n              newCurrentFriendList && newCurrentFriendList.map((user) => {\r\n                return (\r\n                  <User id={user.id} key={user.data.uid} user={user.data} onClick={initChat} />\r\n                )\r\n              })\r\n            }\r\n          </div>\r\n          <h3>Groups</h3>\r\n          <div>\r\n            {\r\n              groups && groups.map((group) => {\r\n                if (group.data.user_uids.includes(docId)) {\r\n                  return (\r\n                    <div>\r\n                      <UserGroups groupImageUrl={group.data.groupImage} group={group} userDocIds={group.data.user_uids} id={group.id} userGroups={group.data} onClick={initGroup} />\r\n                      <div className={classes.root3}>\r\n                        <Modal\r\n                          open={open3}\r\n                          onClose={() => setOpen3(false)}\r\n                          className={classes.modal3}\r\n                        >\r\n                          <div className={classes.paper3}>\r\n                            <h3>Add new members</h3>\r\n                            (Enter to choose)\r\n                            <div className=\"input-tag\">\r\n                              <ul className=\"input-tag__tags\">\r\n                                {tags.map((tag, i) => (\r\n                                  <li key={tag}>\r\n                                    {tag}\r\n                                    <button type=\"button\" onClick={() => removeTagGroup(i)}>x</button>\r\n                                  </li>\r\n                                ))}\r\n                                <li className=\"input-tag__tags__input\">\r\n                                  <input style={{ width: \"100%\" }} onKeyDown={(e) => handleSelect(e)} list=\"friendlist\" type=\"text\" placeholder=\"Enter new member's name\" value={tagInput} onChange={(e) => setTagInput(e.target.value)} />\r\n                                </li>\r\n                              </ul>\r\n                            </div>\r\n\r\n                            <datalist\r\n                              id=\"friendlist\"\r\n                              value={selectedValue}\r\n                              // onChange={(e) => handleSelectFromDataList(e)}\r\n                              onChange={(e) => handleSelect(e)}\r\n                              onSelect={(e) => handleSelect(e)}\r\n                            >\r\n                              {friendListName\r\n                                .filter((friend) => friend.toLowerCase().includes(tagInput.toLowerCase()))\r\n                                .filter((friend) => !tags.includes(friend))\r\n                                .map((friend) => {\r\n                                  if (currentConversationUsernames && !currentConversationUsernames.includes(friend)) {\r\n                                    return (\r\n                                      <option onSelect={(e) => setSelectedValue(e.target.value)} value={friend}>{friend}</option>\r\n                                    )\r\n                                  }\r\n                                })\r\n                              }\r\n                            </datalist>\r\n                            <Button styles={{ marginTop: 200 }} onClick={(e) => addMemberToGroups(e, group)}>Add Members to Group</Button>\r\n                          </div>\r\n                        </Modal>\r\n                      </div>\r\n\r\n                      <div className={classes.root3}>\r\n                        <Modal\r\n                          open={open4}\r\n                          onClose={() => setOpen4(false)}\r\n                          className={classes.modal3}\r\n                        >\r\n                          <ul className={classes.paper4}>\r\n                            <h3>Remove members</h3>\r\n                            {currentConversationUsernames && currentConversationUsernames.map((member) => {\r\n                              if (member != currentUser.displayName) {\r\n                                return (\r\n                                  <li style={{ display: \"flex\", flexDirection: \"row\", justifyContent: \"space-around\", marginBottom: 20 }} >\r\n                                    <div>{member}</div>\r\n                                    <Button onClick={() => handleRemoveMember(member)}>Remove</Button>\r\n                                  </li>\r\n                                )\r\n                              }\r\n                            })}\r\n                          </ul>\r\n                        </Modal>\r\n                      </div>\r\n\r\n                      <div className={classes.root3}>\r\n                        <Modal\r\n                          open={open5}\r\n                          onClose={() => setOpen5(false)}\r\n                          className={classes.modal3}\r\n                        >\r\n                          <ul className={classes.paper4}>\r\n                            <h3>Change Group Image</h3>\r\n                            <div>\r\n                              <input type=\"file\" onChange={handleImageAsFile} />\r\n                              <button onClick={handleFirebaseUploadGroup}>Upload</button>\r\n                            </div>\r\n                          </ul>\r\n                        </Modal>\r\n                      </div>\r\n                    </div>\r\n                  )\r\n                }\r\n              })\r\n            }\r\n          </div>\r\n          <Button onClick={(e) => handleCreateGroupModal(e)} style={{ backgroundColor: \"#446fd1\", height: 50 }}>Create a new group</Button>\r\n\r\n          <div className={classes.root3}>\r\n            <Modal\r\n              open={open2}\r\n              onClose={() => setOpen2(false)}\r\n              className={classes.modal3}\r\n            >\r\n              <div className={classes.paper2}>\r\n                <h3>Create new conversation group </h3>\r\n                <div>\r\n                  <input style={{ width: \"100%\" }} type=\"text\" placeholder=\"Enter conversation's name\" value={converName} onChange={(e) => setConverName(e.target.value)} />\r\n                </div>\r\n                <div className=\"input-tag\">\r\n                  <ul className=\"input-tag__tags\">\r\n                    {tags.map((tag, i) => (\r\n                      <li key={tag}>\r\n                        {tag}\r\n                        <button type=\"button\" onClick={() => removeTag(i)}>x</button>\r\n                      </li>\r\n                    ))}\r\n                    <li className=\"input-tag__tags__input\">\r\n                      <input style={{ width: \"100%\" }} onKeyDown={(e) => handleSelect(e)} list=\"friendlist\" type=\"text\" placeholder=\"Enter new member's name\" value={tagInput} onChange={(e) => setTagInput(e.target.value)} />\r\n                    </li>\r\n                  </ul>\r\n                </div>\r\n\r\n                <datalist\r\n                  id=\"friendlist\"\r\n                  value={selectedValue}\r\n                  onChange={(e) => handleSelect(e)}\r\n                  onSelect={(e) => handleSelect(e)}\r\n                >\r\n                  {friendListName\r\n                    .filter((friend) => friend.toLowerCase().includes(tagInput.toLowerCase()))\r\n                    .filter((friend) => !tags.includes(friend))\r\n                    .map((friend) => {\r\n                      return (\r\n                        <option value={friend}>{friend}</option>\r\n                      )\r\n                    })\r\n                  }\r\n                </datalist>\r\n                <Button onClick={createNewConversationGroup}>Create</Button>\r\n              </div>\r\n            </Modal>\r\n          </div>\r\n        </div>\r\n        <div className=\"chatArea\">\r\n          <div className=\"chatHeader\">\r\n            {\r\n              chatGroup ?\r\n                chatStarted ?\r\n                  (<div className=\"chatHeaderGroup\">\r\n                    <div style={{ width: \"90%\" }}>{chatUser}</div>\r\n                    <div style={{ width: \"10%\", display: \"flex\", flexDirection: \"row\", justifyContent: \"space-around\", alignItems:\"center\" }}>\r\n                      <FontAwesomeIcon style={{fontSize: 35}} onClick={openFunctionModal} icon={faPlus} />\r\n                      <FontAwesomeIcon style={{fontSize: 35}} onClick={openInfoModal} icon={faInfoCircle} />\r\n\r\n                      <Modal\r\n                        open={open9}\r\n                        onClose={() => setOpen9(false)}\r\n                        className={classes.modal3}\r\n                      >\r\n                        <div className={classes.paper4}>\r\n                          <h3>Group Functions</h3>\r\n                          <div style={{display: \"flex\", justifyContent: 'space-around',}}>\r\n                            <Button style={{marginBot: 20}} onClick={handleOpenModalAdd}>Add</Button>\r\n                            <Button style={{marginBot: 20}} onClick={handleOpenModalRemove}>Remove</Button>\r\n                            <Button style={{marginBot: 20}} onClick={handleAddGroupImage}>Change Group Image</Button>\r\n                          </div>\r\n                        </div>\r\n                      </Modal>\r\n\r\n                      <Modal\r\n                        open={open10}\r\n                        onClose={() => setOpen10(false)}\r\n                        className={classes.modal3}\r\n                      >\r\n                        <ul className={classes.paper4}>\r\n                          <h3>Group members</h3>\r\n                          {currentConversationUsernames && currentConversationUsernames.map((member) => {\r\n                            return (\r\n                              <li style={{ display: \"flex\", flexDirection: \"row\", justifyContent: \"space-around\", marginBottom: 20 }} >\r\n                                <div>{member}</div>\r\n                              </li>\r\n                            )\r\n                          })}\r\n                        </ul>\r\n                      </Modal>\r\n\r\n                    </div>\r\n                  </div>)\r\n                  : \"\"\r\n                : chatStarted ? chatUser : \"\"\r\n            }\r\n          </div>\r\n\r\n          <div className=\"messageSections\" ref={messageEl}>\r\n            {\r\n              (chatStarted && !chatGroup) ?\r\n                user.conversations && user.conversations.map((conver) => {\r\n                  return (\r\n                    <div style={{ textAlign: conver.conver.user_uid_1 == currentUser.uid ? 'right' : \"left\" }}>\r\n                      {\r\n                        conver.conver.user_uid_1 == currentUser.uid ?\r\n                          (<div className=\"maindiv\" style={{ display: \"flex\", flexDirection: \"column\", alignItems: \"flex-end\", zIndex: 9999 }}>\r\n                            {(open6 && (currentMessageEmoji && currentMessageEmoji == conver.id)) ? (\r\n                              <div className=\"emojiContainer\">\r\n                                <div onClick={(e) => handleReaction(e, conver.id)} className=\"emoji-li\">{emoji.getUnicode(\"heart\")}</div>\r\n                                <div onClick={(e) => handleReaction(e, conver.id)} className=\"emoji-li\">{emoji.getUnicode(emoji.names[11])}</div>\r\n                                <div onClick={(e) => handleReaction(e, conver.id)} className=\"emoji-li\">{emoji.getUnicode(emoji.names[70])}</div>\r\n                                <div onClick={(e) => handleReaction(e, conver.id)} className=\"emoji-li\">{emoji.getUnicode(emoji.names[73])}</div>\r\n                                <div onClick={(e) => handleReaction(e, conver.id)} className=\"emoji-li\">{emoji.getUnicode(emoji.names[55])}</div>\r\n                                <div onClick={(e) => handleReaction(e, conver.id)} className=\"emoji-li\">{emoji.getUnicode(emoji.names[116])}</div>\r\n                                <div onClick={(e) => handleReaction(e, conver.id)} className=\"emoji-li\">{emoji.getUnicode(emoji.names[117])}</div>\r\n                              </div>\r\n                            ) : null}\r\n                            <div>\r\n                              <div className=\"maindiv\" key={conver.id} className=\"messageContainerCurrent\">\r\n                                <div className=\"hide\" id={conver.id} onClick={(e) => handleShowEmojis(e, conver.id)}>{emoji.getUnicode(\"grinning\")}</div>\r\n                                <FontAwesomeIcon className=\"hide\" onClick={() => handleReplyMess(conver.id)} icon={faReply} />\r\n                                <div className={conver.conver.user_uid_1 == currentUser.uid ? \"messageStyle\" : \"messageStyleWhite\"} >\r\n                                  {conver.conver.haveReply ? (\r\n                                    <div className=\"chatReplyMessage\">\r\n                                      {conver.conver.replyMessage}\r\n                                    </div>\r\n                                  ) : null}\r\n                                  {conver.conver.message}\r\n                                </div>\r\n                              </div>\r\n                              <div className=\"emojiMessage\" style={{ position: \"absolute\", right: \"1%\", marginTop: -16 }}>{conver.conver.emojiSingle}</div>\r\n                            </div>\r\n                          </div>\r\n                          )\r\n                          :\r\n                          (\r\n                            <div className=\"maindiv\" style={{ display: \"flex\", flexDirection: \"column\", alignItems: \"flex-start\", marginBottom: currentMessageEmoji ? 10 : 0 }}>\r\n                              {(open6 && (currentMessageEmoji && currentMessageEmoji == conver.id)) ? (\r\n                                <div className=\"emojiContainer\">\r\n                                  <div onClick={(e) => handleReaction(e, conver.id)} className=\"emoji-li\">{emoji.getUnicode(\"heart\")}</div>\r\n                                  <div onClick={(e) => handleReaction(e, conver.id)} className=\"emoji-li\">{emoji.getUnicode(emoji.names[11])}</div>\r\n                                  <div onClick={(e) => handleReaction(e, conver.id)} className=\"emoji-li\">{emoji.getUnicode(emoji.names[70])}</div>\r\n                                  <div onClick={(e) => handleReaction(e, conver.id)} className=\"emoji-li\">{emoji.getUnicode(emoji.names[73])}</div>\r\n                                  <div onClick={(e) => handleReaction(e, conver.id)} className=\"emoji-li\">{emoji.getUnicode(emoji.names[55])}</div>\r\n                                  <div onClick={(e) => handleReaction(e, conver.id)} className=\"emoji-li\">{emoji.getUnicode(emoji.names[116])}</div>\r\n                                  <div onClick={(e) => handleReaction(e, conver.id)} className=\"emoji-li\">{emoji.getUnicode(emoji.names[117])}</div>\r\n                                </div>\r\n                              ) : null}\r\n                              <div>\r\n                                <div className=\"maindiv\" className=\"messageContainer\">\r\n                                  <div className={conver.conver.user_uid_1 == currentUser.uid ? \"messageStyle\" : \"messageStyleWhite\"} >\r\n                                    {conver.conver.haveReply ? (\r\n                                      <div className=\"chatReplyMessage\">\r\n                                        {conver.conver.replyMessage}\r\n                                      </div>\r\n                                    ) : null}\r\n                                    {conver.conver.message}\r\n                                  </div>\r\n                                  <FontAwesomeIcon className=\"hide\" onClick={() => handleReplyMess(conver.id)} icon={faReply} />\r\n                                  <div className=\"hide\" id={conver.id} onClick={(e) => handleShowEmojis(e, conver.id)}>{emoji.getUnicode(\"grinning\")}</div>\r\n                                </div>\r\n                                <div className=\"emojiMessage\" style={{ position: \"absolute\", left: \"1%\", marginTop: -16 }}>{conver.conver.emojiSingle}</div>\r\n                              </div>\r\n                            </div>\r\n                          )\r\n                      }\r\n                    </div>\r\n                  )\r\n                })\r\n                : (\r\n                  user.conversationsGroup && user.conversationsGroup.map((conver) => {\r\n                    return (\r\n                      <div style={{ textAlign: conver.conver.sender == docId ? 'right' : \"left\" }}>\r\n                        {\r\n                          conver.conver.sender == docId ?\r\n                            (<div className=\"maindiv\" style={{ display: \"flex\", flexDirection: \"column\", alignItems: \"flex-end\", zIndex: 9999 }}>\r\n                              {(open6 && (currentMessageEmoji && currentMessageEmoji == conver.id)) ? (\r\n                                <div className=\"emojiContainer\">\r\n                                  <div onClick={(e) => handleReactionGroup(e, conver.id)} className=\"emoji-li\">{emoji.getUnicode(\"heart\")}</div>\r\n                                  <div onClick={(e) => handleReactionGroup(e, conver.id)} className=\"emoji-li\">{emoji.getUnicode(emoji.names[11])}</div>\r\n                                  <div onClick={(e) => handleReactionGroup(e, conver.id)} className=\"emoji-li\">{emoji.getUnicode(emoji.names[70])}</div>\r\n                                  <div onClick={(e) => handleReactionGroup(e, conver.id)} className=\"emoji-li\">{emoji.getUnicode(emoji.names[73])}</div>\r\n                                  <div onClick={(e) => handleReactionGroup(e, conver.id)} className=\"emoji-li\">{emoji.getUnicode(emoji.names[55])}</div>\r\n                                  <div onClick={(e) => handleReactionGroup(e, conver.id)} className=\"emoji-li\">{emoji.getUnicode(emoji.names[116])}</div>\r\n                                  <div onClick={(e) => handleReactionGroup(e, conver.id)} className=\"emoji-li\">{emoji.getUnicode(emoji.names[117])}</div>\r\n                                </div>\r\n                              ) : null}\r\n                              <div className=\"messageWrapper\">\r\n                                <div className=\"messageSenderRight\">{conver.conver.senderName}</div>\r\n                                <div className=\"messageContainerCurrent\">\r\n                                  <div className=\"hide\" id={conver.id} onClick={(e) => handleShowEmojis(e, conver.id)}>{emoji.getUnicode(\"grinning\")}</div>\r\n                                  <FontAwesomeIcon className=\"hide\" onClick={() => handleReplyMessGroup(conver.id)} icon={faReply} />\r\n                                  <div className={conver.conver.sender == docId ? \"messageStyle\" : \"messageStyleWhite\"} >\r\n                                    {conver.conver.haveReply ? (\r\n                                      <div className=\"chatReplyMessage\">\r\n                                        {conver.conver.replyMessage}\r\n                                      </div>\r\n                                    ) : null}\r\n                                    {conver.conver.message}\r\n                                  </div>\r\n                                  <div className=\"displayPicSmall\">\r\n                                    <img src={conver.conver.profileImage} alt=\"\" />\r\n                                  </div>\r\n                                </div>\r\n                                <div className=\"emojiWrapper\" style={{ display: \"flex\", flexDirection: \"row\", position: \"absolute\", right: \"3%\", marginTop: 70 }}>\r\n                                  {conver.conver.emojiMultiple && Object.keys(conver.conver.emojiMultiple).map(function (key, index) {\r\n                                    return (\r\n                                      <div style={{ display: \"flex\", flexDirection: \"row\" }}>\r\n                                        <p>{conver.conver.emojiMultiple[key].length > 0 ? key : \"\"}</p>\r\n                                        <p>{conver.conver.emojiMultiple[key].length > 0 ? conver.conver.emojiMultiple[key].length : \"\"}</p>\r\n                                      </div>\r\n                                    )\r\n                                  })}\r\n                                </div>\r\n                              </div>\r\n                            </div>\r\n                            )\r\n                            :\r\n                            (\r\n                              <div className=\"maindiv\" style={{ display: \"flex\", flexDirection: \"column\", alignItems: \"flex-start\" }}>\r\n                                {(open6 && (currentMessageEmoji && currentMessageEmoji == conver.id)) ? (\r\n                                  <div className=\"emojiContainer\">\r\n                                    <div onClick={(e) => handleReactionGroup(e, conver.id)} className=\"emoji-li\">{emoji.getUnicode(\"heart\")}</div>\r\n                                    <div onClick={(e) => handleReactionGroup(e, conver.id)} className=\"emoji-li\">{emoji.getUnicode(emoji.names[11])}</div>\r\n                                    <div onClick={(e) => handleReactionGroup(e, conver.id)} className=\"emoji-li\">{emoji.getUnicode(emoji.names[70])}</div>\r\n                                    <div onClick={(e) => handleReactionGroup(e, conver.id)} className=\"emoji-li\">{emoji.getUnicode(emoji.names[73])}</div>\r\n                                    <div onClick={(e) => handleReactionGroup(e, conver.id)} className=\"emoji-li\">{emoji.getUnicode(emoji.names[55])}</div>\r\n                                    <div onClick={(e) => handleReactionGroup(e, conver.id)} className=\"emoji-li\">{emoji.getUnicode(emoji.names[116])}</div>\r\n                                    <div onClick={(e) => handleReactionGroup(e, conver.id)} className=\"emoji-li\">{emoji.getUnicode(emoji.names[117])}</div>\r\n                                  </div>\r\n                                ) : null}\r\n                                <div className=\"messageWrapper\">\r\n                                  <div className=\"messageSenderLeft\">{conver.conver.senderName}</div>\r\n                                  <div className=\"messageContainer\">\r\n                                    <div className=\"displayPicSmall\">\r\n                                      <img src={conver.conver.profileImage} alt=\"\" />\r\n                                    </div>\r\n\r\n                                    <div className={conver.conver.sender == docId ? \"messageStyle\" : \"messageStyleWhite\"} >\r\n                                      {conver.conver.haveReply ? (\r\n                                        <div className=\"chatReplyMessage\">\r\n                                          {conver.conver.replyMessage}\r\n                                        </div>\r\n                                      ) : null}\r\n                                      {conver.conver.message}\r\n                                    </div>\r\n                                    <FontAwesomeIcon className=\"hide\" onClick={() => handleReplyMessGroup(conver.id)} icon={faReply} />\r\n                                    <div className=\"hide\" id={conver.id} onClick={(e) => handleShowEmojis(e, conver.id)}>{emoji.getUnicode(\"grinning\")}</div>\r\n                                  </div>\r\n                                  <div className=\"emojiWrapper\" style={{ display: \"flex\", flexDirection: \"row\", position: \"absolute\", left: \"3%\", marginTop: 70 }}>\r\n                                    {conver.conver.emojiMultiple && Object.keys(conver.conver.emojiMultiple).map(function (key, index) {\r\n                                      return (\r\n                                        <div style={{ display: \"flex\", flexDirection: \"row\" }}>\r\n                                          <p>{conver.conver.emojiMultiple[key].length > 0 ? key : \"\"}</p>\r\n                                          <p style={{ color: \"#7d7a7a\" }}>{conver.conver.emojiMultiple[key].length > 0 ? conver.conver.emojiMultiple[key].length : \"\"}</p>\r\n                                        </div>\r\n                                      )\r\n                                    })}\r\n                                  </div>\r\n                                </div>\r\n                              </div>\r\n                            )\r\n                        }\r\n                      </div>\r\n                    )\r\n                  })\r\n                )\r\n            }\r\n          </div>\r\n\r\n          {\r\n            chatStarted ?\r\n              <div className=\"chatReply\">\r\n                {replyMessage ?\r\n                  (\r\n                    <div className=\"reply\">\r\n                      <div>\r\n                        <div>\r\n                          <FontAwesomeIcon icon={faReply} />\r\n                        Replying to {chatUser}\r\n                        </div>\r\n                        <span className=\"replyMessage\">{replyMessage}</span>\r\n                      </div>\r\n                      <div onClick={handleExitReply} className=\"exit\">\r\n                        <FontAwesomeIcon icon={faTimesCircle} />\r\n                      </div>\r\n                    </div>\r\n                  ) : null\r\n                }\r\n                <div className=\"chatControls\">\r\n                  <input className=\"input\" value={message} onChange={(e) => setMessage(e.target.value)}\r\n                    onKeyDown={handleOnKeyDown}\r\n                    placeholder=\"Write a message\"\r\n                  />\r\n                  <Modal\r\n                    open={open}\r\n                    onClose={() => setOpen(false)}\r\n                  >\r\n                    <div className={classes.paper}>\r\n                      <Picker onEmojiClick={onEmojiClick} />\r\n                    </div>\r\n                  </Modal>\r\n                  <div>\r\n                    <FontAwesomeIcon className=\"icon\" onClick={() => setOpen(true)} icon={faSmile} />\r\n                    <FontAwesomeIcon className=\"icon\" onClick={chatGroup ? sendMessageConversation : sendMessage} icon={faPaperPlane} />\r\n                  </div>\r\n                  {/* <Button className=\"button\" onClick={() => setOpen(true)}>Emo</Button>\r\n                  <Button className=\"button\" onClick={chatGroup ? sendMessageConversation : sendMessage}>Send</Button> */}\r\n                </div>\r\n              </div>\r\n              : null\r\n          }\r\n        </div>\r\n        <div className=\"side-dashboard\">\r\n          <div className=\"upper\">\r\n            <div style={{ position: \"relative\", top: \"10%\" }}>\r\n              <div style={{ color: \"white\", fontSize: 25 }}><strong>{currentUser.displayName}</strong></div>\r\n              <div style={{ color: \"grey\", fontSize: 15 }}><strong>{currentUser.email}</strong></div>\r\n            </div>\r\n            <img\r\n              src={profileImageUrl}\r\n              style={{\r\n                width: 100,\r\n                height: 100,\r\n                borderRadius: 50,\r\n                position: \"relative\",\r\n                top: \"20%\"\r\n              }}\r\n            />\r\n          </div>\r\n          <div className=\"lower\">\r\n            {/* <div onClick={changeProfilePic} className=\"profile-pic hover\">\r\n              <strong style={{ marginLeft: 20 }}>Change Profile Picture</strong>\r\n            </div> */}\r\n            <div className=\"chat2 hover\">\r\n              <strong style={{ marginLeft: 20 }}>\r\n                <Link to=\"/\" style={{ color: 'inherit', textDecoration: 'inherit' }}>Go to Dash Board</Link>\r\n              </strong>\r\n            </div>\r\n            <div className=\"friend-list\">\r\n              <div style={{ display: \"flex\", alignItems: \"center\" }}>\r\n                <strong style={{ marginLeft: 20, marginTop: 10, marginBottom: 10 }}>Friend List</strong>\r\n              </div>\r\n              <div>\r\n                {newCurrentFriendList && newCurrentFriendList.map((friend) => {\r\n                  return (\r\n                    <div>\r\n                      <div className=\"friend-info\">\r\n                        <img\r\n                          src={friend.data.profileImage}\r\n                          style={{\r\n                            width: 40,\r\n                            height: 40,\r\n                            borderRadius: 20,\r\n                          }}\r\n                        />\r\n                        <div style={{ marginLeft: 15 }} className=\"name\">\r\n                          {friend.data.firstName} {friend.data.lastName}\r\n                        </div>\r\n                        {/* <div onClick={(e) => handleRemoveFriend(e)}>\r\n                          <FontAwesomeIcon icon={faTimesCircle} />\r\n                        </div> */}\r\n                      </div>\r\n                    </div>\r\n                  )\r\n                })}\r\n              </div>\r\n            </div>\r\n            {/* <div className=\"update-profile hover\">\r\n              <span style={{ marginLeft: 20 }}>\r\n                <Link to=\"/update-profile\" style={{ color: 'inherit', textDecoration: 'inherit' }}>Update Profile</Link>\r\n              </span>\r\n            </div> */}\r\n\r\n            <div onClick={(e) => handleLogout(e)} className=\"logout hover\">\r\n              <strong style={{ marginLeft: 20 }}>Logout</strong>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default HomePage;\r\n","D:\\ReactAuthFirebase\\react-auth\\src\\actions\\user.actions.js",["159","160","161","162","163","164","165","166","167"],"import {userConstants} from \"./constants\";\r\nimport {db} from \"../services/firebase\"\r\n\r\nexport const getRealTimeUsers = (uid) => {\r\n  return async (dispatch) => {\r\n    \r\n    dispatch({type: `${userConstants.GET_REALTIME_USERS}_REQUEST`})\r\n    const unsubscribe = db.collection(\"users\")\r\n    .onSnapshot((snapShot) => {\r\n      const users = []\r\n      snapShot.docs.map((doc) => {\r\n        if(doc.data().uid != uid){\r\n          users.push(doc.data())\r\n        }\r\n      })\r\n      dispatch({\r\n        type: `${userConstants.GET_REALTIME_USERS}_SUCCESS`,\r\n        payload: {users: users}        \r\n      })\r\n    })\r\n    return unsubscribe\r\n  }\r\n}\r\n\r\nexport const createMessage = (messageObject) =>{\r\n  return async (dispatch) => {\r\n    db.collection(\"conversations\").add({\r\n      ...messageObject,\r\n      isView: false,\r\n      createdAt: new Date()\r\n    })\r\n    .then((data) => {\r\n      // console.log(data)\r\n      //success\r\n    })\r\n    .catch((err) => {\r\n      console.log(err)\r\n    })\r\n  }\r\n}\r\n\r\nexport const createMessageGroup = (messageObject) =>{\r\n  return async (dispatch) => {\r\n    db.collection(\"conversationsGroup\").add({\r\n      ...messageObject,\r\n      isView: false,\r\n      createdAt: new Date()\r\n    })\r\n    .then((data) => {\r\n      // console.log(data)\r\n      //success\r\n    })\r\n    .catch((err) => {\r\n      console.log(err)\r\n    })\r\n  }\r\n}\r\n\r\nexport const getRealTimeConversations = (user) =>{\r\n  return async (dispatch) => {\r\n    db.collection(\"conversations\")\r\n    .where('user_uid_1', 'in', [user.uid_1, user.uid_2])\r\n    .orderBy(\"createdAt\", \"asc\")\r\n    .onSnapshot((snapShot) => {\r\n      const conversations = []\r\n      //doc.data() -> vao 1 document\r\n      snapShot.docs.map((doc) => {\r\n        //nếu như conversation của 2 người match, 1 người là ng gửi và ng kia nhận được \r\n        // thì mới push vào conversation\r\n        if((doc.data().user_uid_1 == user.uid_1 && doc.data().user_uid_2 == user.uid_2)\r\n        ||\r\n        (doc.data().user_uid_1 == user.uid_2 && doc.data().user_uid_2 == user.uid_1)){\r\n          conversations.push({id: doc.id, conver: doc.data()})\r\n        }\r\n\r\n        if(conversations.length > 0){\r\n          dispatch({\r\n            type: userConstants.GET_REALTIME_MESSAGES,\r\n            payload: { conversations }\r\n          })\r\n        }\r\n        else{\r\n          dispatch({\r\n            type: `${userConstants.GET_REALTIME_MESSAGES}_FAILURE`,\r\n            payload: { conversations }\r\n          })\r\n        }\r\n      })\r\n    })\r\n  }\r\n}\r\n\r\nexport const getRealTimeConversationsGroups = (userGroups) => {\r\n  return async (dispatch) => {\r\n    db.collection(\"conversationsGroup\")\r\n      .where(\"conversationName\", \"==\", userGroups.conversationName)\r\n      .orderBy(\"createdAt\", \"asc\")\r\n      .onSnapshot((snapShot)=>{\r\n        const conversationsGroup = []\r\n        snapShot.docs.map((doc) => {\r\n          // console.log(doc.data())\r\n          // if(userGroups.user_uids.includes(doc.data().sender)){\r\n            conversationsGroup.push({id: doc.id, conver: doc.data()})\r\n          // }\r\n          if(conversationsGroup.length > 0){\r\n            dispatch({\r\n              type: userConstants.GET_REALTIME_MESSAGES_GROUP,\r\n              payload: { conversationsGroup }\r\n            })\r\n          }\r\n          else{\r\n            dispatch({\r\n              type: `${userConstants.GET_REALTIME_MESSAGES_GROUP}_FAILURE`,\r\n              payload: { conversationsGroup }\r\n            })\r\n          }\r\n        })\r\n        // console.log(userGroups.user_uids)\r\n        // console.log(conversationsGroup)\r\n      })\r\n  }\r\n}\r\n\r\nfunction arrayEquals(a, b) {\r\n  return Array.isArray(a) &&\r\n    Array.isArray(b) &&\r\n    a.length === b.length &&\r\n    a.every((val, index) => val === b[index]);\r\n}","D:\\ReactAuthFirebase\\react-auth\\src\\components\\auth\\Signup.js",[],"D:\\ReactAuthFirebase\\react-auth\\src\\components\\contexts\\AuthContext.js",["168"],"import React, {useContext, useState, useEffect} from 'react'\r\nimport { auth, db } from \"../../services/firebase\"\r\n\r\nconst AuthContext = React.createContext()\r\n\r\nexport function useAuth(){\r\n  return useContext(AuthContext)\r\n}\r\n\r\nexport function AuthProvider({children}) {\r\n  const [currentUser, setCurrentUser] = useState()\r\n  const [loading, setLoading] = useState(true)\r\n\r\n  const signup = (email, password) => {\r\n    return auth.createUserWithEmailAndPassword(email, password)\r\n  }\r\n\r\n  const login = (email, password) => {\r\n    return auth.signInWithEmailAndPassword(email, password)\r\n  }\r\n\r\n  const logout = () => {\r\n    return auth.signOut()\r\n  }\r\n\r\n  const resetPassword = (email) =>{\r\n    return auth.sendPasswordResetEmail(email)\r\n  }\r\n\r\n  const updateEmail = (email) =>{\r\n    return currentUser.updateEmail(email)\r\n  }\r\n\r\n  const updatePassword = (password) =>{\r\n    return currentUser.updatePassword(password)\r\n  }\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    const unsubscribe = auth.onAuthStateChanged(user => {\r\n      // khi nào thấy change in authUser -> notify us\r\n      setCurrentUser(user) \r\n      setLoading(false)\r\n    })\r\n      //only run once\r\n    return unsubscribe\r\n  }, []);\r\n\r\n  const value = {\r\n    currentUser,\r\n    signup,\r\n    login,\r\n    logout,\r\n    resetPassword,\r\n    updateEmail,\r\n    updatePassword\r\n  }\r\n\r\n  return(\r\n    <AuthContext.Provider value = {value}>\r\n      {!loading && children}\r\n      {/* if we are not loading, we will render the children */}\r\n    </AuthContext.Provider>\r\n  )\r\n}",["169","170"],"D:\\ReactAuthFirebase\\react-auth\\src\\components\\todos\\Todo.js",[],"D:\\ReactAuthFirebase\\react-auth\\src\\index.js",[],["171","172"],"D:\\ReactAuthFirebase\\react-auth\\src\\components\\auth\\Login.js",["173","174","175","176"],"import React, { useRef, useState, useEffect } from 'react';\r\nimport { Card, Form, Button, Alert } from 'react-bootstrap';\r\nimport { useAuth } from '../contexts/AuthContext';\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport { db } from '../../services/firebase';\r\n\r\nconst Login = () => {\r\n  const emailRef = useRef()\r\n  const passwordRef = useRef()\r\n  const { login, currentUser } = useAuth()\r\n  const [error, setError] = useState(\"\")\r\n  const [loading, setLoading] = useState(false)\r\n  const [verified, setVerified] = useState(false)\r\n  const history = useHistory()\r\n  async function handleSubmit(e) {\r\n    e.preventDefault()\r\n\r\n    try {\r\n      setError(\"\")\r\n      setLoading(true)\r\n      await login(emailRef.current.value, passwordRef.current.value)\r\n      .then((data) => {\r\n        const name = data.user.displayName.split(\" \");\r\n        const firstName = name[0];\r\n        const lastName = name[1];\r\n\r\n        const loggedInUser = {\r\n            firstName,\r\n            lastName,\r\n            uid: data.user.uid,\r\n            email: data.user.email\r\n        }\r\n\r\n        localStorage.setItem('user', JSON.stringify(loggedInUser));\r\n      })\r\n\r\n      history.push(\"/\")\r\n    }\r\n    catch {\r\n      setError(\"Failed to login\")\r\n    }\r\n    setLoading(false)\r\n  }\r\n\r\n  return (\r\n    <div className=\"loginWrap\">\r\n      <h2 style={{marginBottom: 50}}>Welcome to Messenger Clone</h2> \r\n      <h4 style={{marginBottom: 40}}>Product by Quang Nguyen</h4> \r\n\r\n      <Card style={{width: 400, height: 400}}>\r\n        <Card.Body>\r\n          <h2 className=\"text-center mb-4\">Log in</h2>\r\n          {error && <Alert variant=\"danger\">{error}</Alert>}\r\n          {verified && <Alert variant=\"success\">A verification has been sent</Alert>}\r\n\r\n          <Form onSubmit={handleSubmit}>\r\n            <Form.Group id=\"email\">\r\n              <Form.Label>Email</Form.Label>\r\n              <Form.Control type=\"email\" ref={emailRef} required></Form.Control>\r\n            </Form.Group>\r\n\r\n            <Form.Group id=\"password\">\r\n              <Form.Label>Password</Form.Label>\r\n              <Form.Control type=\"password\" ref={passwordRef} required></Form.Control>\r\n            </Form.Group>\r\n\r\n            <Button disabled={loading} className=\"w-100\" type=\"submit\">\r\n              Log in\r\n          </Button>\r\n          </Form>\r\n          <div className=\"w-100 text-center mt-3\">\r\n            <Link to=\"/forgot-password\">Forgot Password</Link>\r\n          </div>\r\n\r\n          <div className=\"w-100 text-center mt-2\">\r\n            Need an account? <Link to=\"/signup\">Sign up</Link>\r\n          </div>\r\n        </Card.Body>\r\n      </Card>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Login;\r\n","D:\\ReactAuthFirebase\\react-auth\\src\\components\\chat\\header\\header.js",["177","178","179"],"import React,{useState, useEffect} from 'react';\r\nimport './header.css'\r\nimport { useAuth } from '../../contexts/AuthContext';\r\nimport { Link, useHistory } from 'react-router-dom';\r\nimport { Alert, Button } from 'react-bootstrap';\r\nimport {db} from \"../../../services/firebase\"\r\n\r\nconst Header = () => {\r\n  const [error, setError] = useState(\"\")\r\n  const {currentUser, logout} = useAuth()\r\n  const history = useHistory()\r\n  \r\n  const [docId, setDocId] = useState()\r\n  const [invalidate, setInvalidate] = useState(true)\r\n  \r\n  useEffect(() => {\r\n    if(invalidate){\r\n      db.collection(\"users\").where(\"uid\", \"==\", currentUser.uid)\r\n      .onSnapshot((snapShot)=>{\r\n        snapShot.docs.map((doc)=>setDocId(doc.id))\r\n        setInvalidate(false)\r\n      })\r\n    }\r\n  }, [invalidate]);\r\n\r\n  useEffect(() => {\r\n      db.collection(\"users\").doc(docId).update({\r\n        isOnline:true\r\n      })\r\n  }, [docId]);\r\n  \r\n  async function handleLogout(e){\r\n    setError('')\r\n\r\n    try{\r\n      await logout()\r\n      .then(() => {\r\n        db.collection(\"users\").doc(docId).update({\r\n          isOnline: false\r\n        })\r\n      })\r\n      await localStorage.clear()\r\n      history.push('/login')\r\n    }\r\n    catch{\r\n      setError(\"Failed to log out\")\r\n    }\r\n  }\r\n  return (\r\n    <header className=\"header\">\r\n        <div style={{display: 'flex'}}>\r\n          <div className=\"logo\">Web Messenger</div>\r\n          {error && <Alert variant=\"danger\">{error}</Alert>}\r\n            {\r\n              !currentUser ? \r\n              <ul className=\"leftMenu\">\r\n                <li><Link to='/login'>Login</Link></li>\r\n                <li><Link to='/signup'>Sign up</Link></li>\r\n              </ul> : null\r\n            }     \r\n        </div>\r\n          <div style={{margin: '20px 0', color: '#fff', fontWeight: 'bold'}}>\r\n            {currentUser ? `Welcome ${currentUser.displayName}` : ''}\r\n          </div>\r\n        <ul className=\"menu\">\r\n            {/* {\r\n              currentUser ?\r\n              <li>\r\n                <Button style={{backgroundColor: \"black\"}} onClick={handleLogout}>Logout</Button>\r\n            </li> : null\r\n            }  */}\r\n        </ul>\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n",["180","181"],"D:\\ReactAuthFirebase\\react-auth\\src\\components\\todos\\index.js",[],"D:\\ReactAuthFirebase\\react-auth\\src\\services\\firebase.js",[],"D:\\ReactAuthFirebase\\react-auth\\src\\reducers\\index.js",[],"D:\\ReactAuthFirebase\\react-auth\\src\\actions\\constants.js",[],"D:\\ReactAuthFirebase\\react-auth\\src\\components\\auth\\Dashboard.js",["182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206","207","208","209","210","211","212","213"],"import React, { useState, useEffect, useRef } from 'react';\r\nimport { Alert, Button, Card } from \"react-bootstrap\"\r\nimport { useAuth } from \"../contexts/AuthContext\"\r\nimport { Link, useHistory } from \"react-router-dom\"\r\nimport Header from '../chat/header/header';\r\nimport Modal from '@material-ui/core/Modal';\r\nimport { db, storage } from '../../services/firebase';\r\nimport { makeStyles } from '@material-ui/core';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faCoffee, faReply, faTimesCircle, faUserPlus, faCheck, faTimes } from '@fortawesome/free-solid-svg-icons'\r\nimport firebase from \"firebase\"\r\nimport \"./Dashboard.css\"\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    position: \"absolute\",\r\n    bottom: \"10%\",\r\n    right: 250,\r\n    width: \"auto\",\r\n    backgroundColor: theme.palette.background.paper,\r\n    border: '2px solid #000',\r\n    padding: theme.spacing(2, 4, 3),\r\n  },\r\n  root3: {\r\n    flexGrow: 1,\r\n    minWidth: 300,\r\n  },\r\n  modal3: {\r\n    display: 'flex',\r\n    padding: theme.spacing(1),\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n    minWidth: 300,\r\n    // height: 300\r\n  },\r\n  paper2: {\r\n    width: 500,\r\n    height: 500,\r\n    alignItems: \"center\",\r\n    backgroundColor: theme.palette.background.paper,\r\n    border: '2px solid #000',\r\n    boxShadow: theme.shadows[5],\r\n    padding: theme.spacing(2, 4, 3),\r\n  },\r\n  paper4: {\r\n    width: 500,\r\n    height: 500,\r\n    alignItems: \"center\",\r\n    backgroundColor: theme.palette.background.paper,\r\n    border: '2px solid #000',\r\n    boxShadow: theme.shadows[5],\r\n    padding: theme.spacing(2, 4, 3),\r\n  },\r\n}));\r\n\r\nconst User = (props) => {\r\n  const { id, user, docId } = props\r\n  const [pendingFriends, setPendingFriends] = useState([])\r\n  const [sentFriendRequests, setSentFriendRequests] = useState([])\r\n  const [pending, setPending] = useState()\r\n\r\n  useEffect(() => {\r\n    db.collection(\"users\").doc(docId).onSnapshot((doc) => {\r\n      if (doc) {\r\n        setPendingFriends(doc.data().pendingFriends)\r\n      }\r\n    })\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    db.collection(\"users\").doc(docId).onSnapshot((doc) => {\r\n      if (doc) {\r\n        setSentFriendRequests(doc.data().sentFriendRequests)\r\n      }\r\n    })\r\n  }, []);\r\n\r\n  const handleAddFriend = async (id) => {\r\n    setPending(true)\r\n    await db.collection(\"users\").doc(id).update({\r\n      pendingFriends: firebase.firestore.FieldValue.arrayUnion(docId)\r\n    })\r\n    await db.collection(\"users\").doc(docId).update({\r\n      sentFriendRequests: firebase.firestore.FieldValue.arrayUnion(id)\r\n    })\r\n  }\r\n\r\n  const handleAcceptFriend = async (id) => {\r\n    await db.collection(\"users\").doc(docId).update({\r\n      friendList: firebase.firestore.FieldValue.arrayUnion(id)\r\n    })\r\n\r\n    await db.collection(\"users\").doc(id).update({\r\n      friendList: firebase.firestore.FieldValue.arrayUnion(docId)\r\n    })\r\n\r\n    await db.collection(\"users\").doc(id).update({\r\n      pendingFriends: pendingFriends.filter((friendId) => friendId != docId)\r\n    })\r\n\r\n    await db.collection(\"users\").doc(docId).update({\r\n      pendingFriends: pendingFriends.filter((friendId) => friendId != id)\r\n    })\r\n\r\n    await db.collection(\"users\").doc(id).update({\r\n      sentFriendRequests: sentFriendRequests.filter((friendId) => friendId != docId)\r\n    })\r\n\r\n    await db.collection(\"users\").doc(docId).update({\r\n      sentFriendRequests: sentFriendRequests.filter((friendId) => friendId != id)\r\n    })\r\n    setPendingFriends([])\r\n    setSentFriendRequests([])\r\n    // console.log(\"Accepted\", id)\r\n  }\r\n\r\n  const handleDeclineFriend = async (id) => {\r\n    await db.collection(\"users\").doc(id).update({\r\n      pendingFriends: pendingFriends.filter((friendId) => friendId != docId)\r\n    })\r\n\r\n    await db.collection(\"users\").doc(docId).update({\r\n      pendingFriends: pendingFriends.filter((friendId) => friendId != id)\r\n    })\r\n  }\r\n\r\n  return (\r\n    <Card>\r\n      <Card.Body style={{width: \"50%\"}}>\r\n        <div className=\"user-card\">\r\n          <div className=\"profile-image\">\r\n          <img\r\n              src={user.profileImage}\r\n              style={{\r\n                width: 70,\r\n                height: 70,\r\n                objectFit: \"cover\",\r\n                borderRadius: 35,\r\n                position: \"relative\",\r\n                top: \"20%\"\r\n              }}\r\n            />\r\n          </div>\r\n          <div style={{marginLeft: 30, marginRight: 30}}>\r\n            <div className=\"name\">\r\n              <strong>Name: {user.firstName} {user.lastName}</strong>\r\n            </div>\r\n       {/* <div className=\"email\">\r\n              <strong>Email: {user.email}</strong>\r\n            </div>\r\n      */}\r\n          </div>\r\n\r\n          {/* <FontAwesomeIcon icon={faReply} /> */}\r\n          {\r\n            sentFriendRequests && sentFriendRequests.includes(id) ?\r\n              (\r\n                <Button onClick={() => handleAddFriend(id)} disabled={true}>Pending</Button>\r\n              )\r\n              :\r\n              (\r\n                <div>\r\n                  {pendingFriends && pendingFriends.includes(id) ?\r\n                    (\r\n                      <>\r\n                        <Button onClick={() => handleAcceptFriend(id)}>\r\n                          <FontAwesomeIcon icon={faCheck}/>\r\n                        </Button>\r\n                        <Button onClick={() => handleDeclineFriend(id)}>\r\n                          <FontAwesomeIcon icon={faTimes}/>\r\n                        </Button>\r\n                      </>\r\n                    )\r\n                    :\r\n                    (\r\n                      <>\r\n                        <Button onClick={() => handleAddFriend(id)} disabled={pending}>{pending ? \"Pending\" : (\r\n                          <FontAwesomeIcon icon={faUserPlus}/>\r\n                        )}</Button>\r\n                      </>\r\n                    )\r\n                  }\r\n                </div>\r\n              )\r\n          }\r\n        </div>\r\n      </Card.Body>\r\n    </Card>\r\n  )\r\n}\r\n\r\nconst Friend = (props) => {\r\n  const { friendId, docId, friendList } = props\r\n  const [friendProfile, setFriendProfile] = useState({})\r\n\r\n  useEffect(() => {\r\n    db.collection(\"users\").doc(friendId).get().then((doc) => {\r\n      if (doc) {\r\n        // console.log(doc.data())\r\n        setFriendProfile(doc.data())\r\n      }\r\n    })\r\n  }, []);\r\n\r\n\r\n  const handleRemoveFriend = (e) => {\r\n    e.preventDefault()\r\n    // console.log(friendList)\r\n    db.collection(\"users\").doc(docId).update({\r\n      friendList: friendList.filter((friend) => friend != friendId)\r\n    })\r\n\r\n    db.collection(\"users\").doc(friendId).update({\r\n      friendList: friendList.filter((friend) => friend != docId)\r\n    })\r\n  }\r\n\r\n  return (\r\n    <div className=\"friend-info\">\r\n      <img\r\n        src={friendProfile.profileImage}\r\n        style={{\r\n          width: 40,\r\n          height: 40,\r\n          borderRadius: 20,\r\n        }}\r\n      />\r\n      <div style={{ marginLeft: 15 }} className=\"name\">\r\n        {friendProfile.firstName} {friendProfile.lastName}\r\n      </div>\r\n      <div onClick={(e) => handleRemoveFriend(e)}>\r\n        <FontAwesomeIcon icon={faTimesCircle} />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nconst Dashboard = () => {\r\n  const [error, setError] = useState(\"\")\r\n  const { currentUser, logout } = useAuth()\r\n  const [docId, setDocId] = useState() //current User Firebase document id\r\n  const [invalidate, setInvalidate] = useState(true)\r\n  const [userList, setUserList] = useState([])\r\n  const [invalidate2, setInvalidate2] = useState(true)\r\n  const [invalidate3, setInvalidate3] = useState(true)\r\n  const [invalidate4, setInvalidate4] = useState(true)\r\n  const [listPendingFriends, setListPendingFriends] = useState([])\r\n  const [friendList, setFriendList] = useState([])\r\n  const [selectedFile, setSelectedFile] = useState(null)\r\n  const [currentUserInfo, setCurrentUserInfo] = useState({})\r\n  const allInputs = { imgUrl: '' }\r\n  const [imageAsFile, setImageAsFile] = useState('')\r\n  const [imageAsUrl, setImageAsUrl] = useState(allInputs)\r\n  const [profileImageUrl, setProfileImageUrl] = useState(\"\")\r\n  const [invalidate5, setInvalidate5] = useState(true)\r\n  const [open, setOpen] = useState(false)\r\n  const classes = useStyles()\r\n  const history = useHistory()\r\n  useEffect(() => {\r\n    if (docId) {\r\n      db.collection(\"users\").doc(docId).get().then((doc) => {\r\n        if (doc.data().profileImage) {\r\n          // console.log(doc.data().profileImage)\r\n          setProfileImageUrl(doc.data().profileImage)\r\n        }\r\n      })\r\n      setInvalidate5(false)\r\n    }\r\n  }, [docId, invalidate5, imageAsUrl]);\r\n\r\n  useEffect(() => {\r\n    if (docId) {\r\n      db.collection(\"users\").doc(docId).onSnapshot((doc) => {\r\n        if (doc.data().pendingFriends) {\r\n          setListPendingFriends(doc.data().pendingFriends)\r\n        }\r\n      })\r\n    }\r\n  }, [docId]);\r\n\r\n  useEffect(() => {\r\n    if (invalidate) {\r\n      db.collection(\"users\").where(\"uid\", \"==\", currentUser.uid)\r\n        .onSnapshot((snapShot) => {\r\n          snapShot.docs.map((doc) => setDocId(doc.id))\r\n          setInvalidate(false)\r\n        })\r\n    }\r\n  }, [invalidate]);\r\n\r\n  useEffect(() => {\r\n    db.collection(\"users\").doc(docId).update({\r\n      isOnline: true\r\n    })\r\n  }, [docId]);\r\n\r\n  useEffect(() => {\r\n    db.collection(\"users\").doc(docId).onSnapshot((doc)=>{\r\n      if(doc.data()){\r\n        setCurrentUserInfo(doc.data())\r\n      }\r\n    })\r\n  }, [docId]);\r\n  \r\n\r\n  useEffect(() => {\r\n    if (listPendingFriends) {\r\n      let newUserList = []\r\n      db.collection(\"users\").get().then((data) => {\r\n        data.docs.map((doc) => {\r\n          if (doc.data().uid != currentUser.uid && listPendingFriends.includes(doc.id)) {\r\n            newUserList.push({ id: doc.id, user: doc.data(), pending: true })\r\n          }\r\n          else if (doc.data().uid != currentUser.uid) {\r\n            newUserList.push({ id: doc.id, user: doc.data(), pending: false })\r\n          }\r\n        })\r\n        // console.log(newUserList)\r\n        setUserList(newUserList)\r\n      })\r\n      setInvalidate2(false)\r\n    }\r\n  }, [listPendingFriends]);\r\n\r\n  useEffect(() => {\r\n    if (docId) {\r\n      db.collection(\"users\").doc(docId).onSnapshot((doc) => {\r\n        if (doc.data().friendList) {\r\n          const filteredFriendList = doc.data().friendList.filter((friend) => friend != docId)\r\n          setFriendList(filteredFriendList)\r\n        }\r\n      })\r\n      setInvalidate4(false)\r\n    }\r\n  }, [docId, invalidate4]);\r\n\r\n  const handleImageAsFile = (e) => {\r\n    const image = e.target.files[0]\r\n    setImageAsFile(imageAsFile => image)\r\n  }\r\n\r\n  const handleFirebaseUpload = (e) => {\r\n    e.preventDefault()\r\n    // console.log(\"Start to upload\")\r\n    if (imageAsFile === '') {\r\n      // console.log(`not an image, the image file is type of ${typeof (imageAsFile)}`)\r\n    }\r\n    const uploadTask = storage.ref(`/images/${imageAsFile.name}`).put(imageAsFile)\r\n    uploadTask.on(\"state_changed\", (snapShot) => {\r\n      // console.log(snapShot)\r\n    }, (err) => {\r\n      console.log(err)\r\n    }, () => {\r\n      storage.ref('images').child(imageAsFile.name).getDownloadURL()\r\n        .then(fireBaseUrl => {\r\n          setImageAsUrl(prevObject => ({ ...prevObject, imgUrl: fireBaseUrl }))\r\n          db.collection(\"users\").doc(docId).update({\r\n            profileImage: fireBaseUrl\r\n          })\r\n        })\r\n    })\r\n    setOpen(false)\r\n  }\r\n\r\n  const changeProfilePic = (e) => {\r\n    setOpen(true)\r\n  }\r\n\r\n  async function handleLogout(e){\r\n    setError('')\r\n\r\n    try{\r\n      await logout()\r\n      .then(() => {\r\n        db.collection(\"users\").doc(docId).update({\r\n          isOnline: false\r\n        })\r\n      })\r\n      await localStorage.clear()\r\n      history.push('/login')\r\n    }\r\n    catch{\r\n      setError(\"Failed to log out\")\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {/* <Header /> */}\r\n      <div className=\"card-container\">\r\n        <div className=\"side-dashboard\">\r\n          <div className=\"upper\">\r\n            <div style={{ position: \"relative\", top: \"10%\" }}>\r\n              <div style={{ color: \"white\", fontSize: 25 }}><strong>{currentUserInfo && (`${currentUserInfo.firstName} ${currentUserInfo.lastName}`)}</strong></div>\r\n              <div style={{ color: \"grey\", fontSize: 15 }}><strong>{currentUser.email}</strong></div>\r\n            </div>\r\n            <img\r\n              src={profileImageUrl}\r\n              style={{\r\n                width: 100,\r\n                height: 100,\r\n                borderRadius: 50,\r\n                position: \"relative\",\r\n                top: \"20%\"\r\n              }}\r\n            />\r\n          </div>\r\n          <div className=\"lower\">\r\n                <Modal\r\n                  open={open}\r\n                  onClose={() => setOpen(false)}\r\n                  className={classes.modal3}\r\n                >\r\n                  <div className={classes.paper4}>\r\n                    <input type=\"file\" onChange={handleImageAsFile} />\r\n                    <button onClick={handleFirebaseUpload}>Upload</button>\r\n                  </div>\r\n                </Modal>\r\n            <div onClick={changeProfilePic} className=\"profile-pic hover\">\r\n              <strong style={{ marginLeft: 20 }}>Change Profile Picture</strong>\r\n            </div>\r\n            <div className=\"chat hover\">\r\n              <strong style={{ marginLeft: 20 }}>\r\n                <Link to=\"/chat\" style={{ color: 'inherit', textDecoration: 'inherit' }}>Go to Messenger</Link>\r\n              </strong>\r\n            </div>\r\n            <div className=\"friend-list\">\r\n              <strong style={{ marginLeft: 20, marginTop: 10, marginBottom: 10 }}>Friend List</strong>\r\n              <div>\r\n                {friendList && friendList.map((friendId) => {\r\n                  return (\r\n                    <Friend friendList={friendList} docId={docId} friendId={friendId} />\r\n                  )\r\n                })}\r\n              </div>\r\n            </div>\r\n            <div className=\"update-profile hover\">\r\n              <span style={{ marginLeft: 20 }}>\r\n                <Link to=\"/update-profile\" style={{ color: 'inherit', textDecoration: 'inherit' }}>Update Profile</Link>\r\n              </span>\r\n            </div>\r\n            \r\n            <div onClick={(e) => handleLogout(e)} className=\"logout hover\">\r\n              <span style={{ marginLeft: 20 }}>Logout</span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        <div className=\"main-page\">\r\n          <div className=\"heading\">\r\n            <span style={{fontSize: 60}}>Welcome to Messenger</span>\r\n          </div>\r\n          <div className=\"userlist\">\r\n            <div style={{height: 70, display:\"flex\", alignItems:\"center\"}}>\r\n              <strong style={{marginLeft: 30, fontSize: 40}}>List of all current users</strong>\r\n            </div>\r\n            {userList && userList.map((user) => {\r\n              if (!friendList.includes(user.id)) {\r\n                return (\r\n                  <User id={user.id} docId={docId} user={user.user} />\r\n                )\r\n              }\r\n            })}\r\n          </div>\r\n        </div>\r\n      </div>\r\n      {/* <div className=\"w-100 text-center mt-2\"> \r\n        <Button variant=\"link\" onClick={handleLogout}>Log Out</Button>\r\n      </div> */}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Dashboard;\r\n","D:\\ReactAuthFirebase\\react-auth\\src\\components\\auth\\ForgotPassword.js",["214","215","216"],"D:\\ReactAuthFirebase\\react-auth\\src\\components\\auth\\PrivateRoute.js",[],["217","218"],"D:\\ReactAuthFirebase\\react-auth\\src\\actions\\auth.actions.js",["219"],"import {db} from \"../services/firebase\"\r\n\r\nexport const signup = (user) =>{\r\n  return (dispatch) =>{\r\n\r\n  }\r\n}","D:\\ReactAuthFirebase\\react-auth\\src\\reducers\\auth.reducer.js",["220","221"],"D:\\ReactAuthFirebase\\react-auth\\src\\components\\auth\\UpdateProfile.js",["222","223","224"],"import React, {useRef, useState, useEffect} from 'react';\r\nimport {Card, Form, Button, Alert} from 'react-bootstrap'\r\nimport { useAuth } from '../contexts/AuthContext';\r\nimport {Link, useHistory} from \"react-router-dom\";\r\nimport { db, storage } from '../../services/firebase';\r\n\r\nconst UpdateProfile = () => {\r\n  const emailRef = useRef()\r\n  const passwordRef = useRef()\r\n  const passwordConfirmRef = useRef()\r\n  const firstNameRef = useRef()\r\n  const lastNameRef = useRef()\r\n  const {updatePassword, updateEmail, currentUser} = useAuth()\r\n  const [error, setError] = useState(\"\")\r\n  const [loading, setLoading] = useState(false)\r\n  const [verified, setVerified] = useState(false)\r\n  const [invalidate, setInvalidate] = useState(true)\r\n  const [docId, setDocId] = useState(\"\")\r\n  const history = useHistory()\r\n\r\n  useEffect(() => {\r\n    if (invalidate) {\r\n      db.collection(\"users\").where(\"uid\", \"==\", currentUser.uid)\r\n        .onSnapshot((snapShot) => {\r\n          snapShot.docs.map((doc) => setDocId(doc.id))\r\n          setInvalidate(false)\r\n        })\r\n    }\r\n  }, [invalidate]);\r\n\r\n  //luôn set loading trước async function \r\n  function handleSubmit(e){\r\n    e.preventDefault()\r\n    setError(\"\")\r\n    if(passwordRef.current.value !== passwordConfirmRef.current.value){\r\n      return setError(\"Passwords do not match\")\r\n      //set the error only 1 time\r\n    }\r\n\r\n    const promises = [] //async\r\n    setLoading(true)\r\n    if(emailRef.current.value !== currentUser.email){\r\n      promises.push(updateEmail(emailRef.current.value))\r\n    }\r\n\r\n    if(passwordRef.current.value){\r\n      promises.push(updatePassword(passwordRef.current.value))\r\n    }\r\n\r\n    if(firstNameRef.current.value && docId){\r\n      promises.push(\r\n        db.collection(\"users\").doc(docId).update({\r\n          firstName: firstNameRef.current.value \r\n        })\r\n      )\r\n    }\r\n\r\n    if(lastNameRef.current.value && docId){\r\n      promises.push(db.collection(\"users\").doc(docId).update({\r\n        lastName: lastNameRef.current.value \r\n      })\r\n      )\r\n    }\r\n\r\n    //promise all chỉ run .then() nếu all promises đã run xong và success\r\n    Promise.all(promises).then(()=>{\r\n      history.push('/')\r\n    }).catch(() => {\r\n      setError(\"Failed to update account\")\r\n    }).finally(() => { //run khi success or fail\r\n      setLoading(false)\r\n    })\r\n  }\r\n  return (\r\n    <div className=\"loginWrap\">\r\n      <Card style={{width: 400, height: 600}}>\r\n        <Card.Body>\r\n        <h2 className=\"text-center mb-4\">Update Profile</h2>\r\n        {/* {currentUser && currentUser.email} */}\r\n        {error && <Alert variant=\"danger\">{error}</Alert>}\r\n        {verified && <Alert variant=\"success\">A verification has been sent</Alert>}\r\n\r\n        <Form onSubmit={handleSubmit}>\r\n          <Form.Group id=\"email\">\r\n            <Form.Label>Email</Form.Label>\r\n            <Form.Control type=\"email\" ref={emailRef} defaultValue={currentUser.email}></Form.Control>\r\n          </Form.Group>\r\n\r\n          <Form.Group id=\"password\">\r\n            <Form.Label>Password</Form.Label>\r\n            <Form.Control type=\"password\" ref={passwordRef} placeholder=\"leave blank to keep the same\"></Form.Control>\r\n          </Form.Group>\r\n\r\n          <Form.Group id=\"password-confirm\">\r\n            <Form.Label>Password Confirmation</Form.Label>\r\n            <Form.Control type=\"password\" ref={passwordConfirmRef} placeholder=\"leave blank to keep the same\"></Form.Control>\r\n          </Form.Group>\r\n\r\n          <Form.Group id=\"firstname\">\r\n            <Form.Label>First Name</Form.Label>\r\n            <Form.Control type=\"text\" ref={firstNameRef} placeholder=\"leave blank to keep the same\"></Form.Control>\r\n          </Form.Group>\r\n\r\n          <Form.Group id=\"lastname\">\r\n            <Form.Label>Last Name</Form.Label>\r\n            <Form.Control type=\"text\" ref={lastNameRef} placeholder=\"leave blank to keep the same\"></Form.Control>\r\n          </Form.Group>\r\n          <Button disabled={loading} className=\"w-100\" type=\"submit\">\r\n            Update Profile\r\n          </Button>\r\n        </Form>\r\n\r\n        </Card.Body>\r\n      </Card>\r\n      <div className=\"w-100 text-center mt-2\">\r\n        <Link to=\"/\">Cancel</Link>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default UpdateProfile;\r\n","D:\\ReactAuthFirebase\\react-auth\\src\\reducers\\user.reducer.js",["225","226"],"D:\\ReactAuthFirebase\\react-auth\\src\\App.js",["227","228","229","230","231"],"D:\\ReactAuthFirebase\\react-auth\\src\\actions\\index.js",[],"D:\\ReactAuthFirebase\\react-auth\\src\\store\\index.js",[],{"ruleId":"232","severity":1,"message":"233","line":2,"column":18,"nodeType":"234","messageId":"235","endLine":2,"endColumn":26},{"ruleId":"232","severity":1,"message":"236","line":2,"column":28,"nodeType":"234","messageId":"235","endLine":2,"endColumn":42},{"ruleId":"232","severity":1,"message":"237","line":12,"column":10,"nodeType":"234","messageId":"235","endLine":12,"endColumn":18},{"ruleId":"232","severity":1,"message":"238","line":14,"column":8,"nodeType":"234","messageId":"235","endLine":14,"endColumn":16},{"ruleId":"232","severity":1,"message":"239","line":124,"column":54,"nodeType":"234","messageId":"235","endLine":124,"endColumn":64},{"ruleId":"232","severity":1,"message":"240","line":124,"column":66,"nodeType":"234","messageId":"235","endLine":124,"endColumn":68},{"ruleId":"232","severity":1,"message":"241","line":125,"column":10,"nodeType":"234","messageId":"235","endLine":125,"endColumn":25},{"ruleId":"232","severity":1,"message":"242","line":125,"column":27,"nodeType":"234","messageId":"235","endLine":125,"endColumn":45},{"ruleId":"232","severity":1,"message":"243","line":126,"column":10,"nodeType":"234","messageId":"235","endLine":126,"endColumn":21},{"ruleId":"232","severity":1,"message":"244","line":126,"column":23,"nodeType":"234","messageId":"235","endLine":126,"endColumn":37},{"ruleId":"232","severity":1,"message":"245","line":152,"column":10,"nodeType":"234","messageId":"235","endLine":152,"endColumn":21},{"ruleId":"232","severity":1,"message":"246","line":174,"column":10,"nodeType":"234","messageId":"235","endLine":174,"endColumn":19},{"ruleId":"232","severity":1,"message":"247","line":174,"column":21,"nodeType":"234","messageId":"235","endLine":174,"endColumn":33},{"ruleId":"232","severity":1,"message":"248","line":175,"column":10,"nodeType":"234","messageId":"235","endLine":175,"endColumn":21},{"ruleId":"232","severity":1,"message":"249","line":181,"column":10,"nodeType":"234","messageId":"235","endLine":181,"endColumn":23},{"ruleId":"232","severity":1,"message":"250","line":185,"column":10,"nodeType":"234","messageId":"235","endLine":185,"endColumn":23},{"ruleId":"232","severity":1,"message":"251","line":188,"column":10,"nodeType":"234","messageId":"235","endLine":188,"endColumn":34},{"ruleId":"232","severity":1,"message":"252","line":189,"column":10,"nodeType":"234","messageId":"235","endLine":189,"endColumn":20},{"ruleId":"232","severity":1,"message":"253","line":189,"column":22,"nodeType":"234","messageId":"235","endLine":189,"endColumn":35},{"ruleId":"232","severity":1,"message":"254","line":190,"column":10,"nodeType":"234","messageId":"235","endLine":190,"endColumn":21},{"ruleId":"232","severity":1,"message":"255","line":190,"column":23,"nodeType":"234","messageId":"235","endLine":190,"endColumn":37},{"ruleId":"232","severity":1,"message":"256","line":191,"column":10,"nodeType":"234","messageId":"235","endLine":191,"endColumn":24},{"ruleId":"232","severity":1,"message":"257","line":192,"column":10,"nodeType":"234","messageId":"235","endLine":192,"endColumn":15},{"ruleId":"232","severity":1,"message":"258","line":198,"column":9,"nodeType":"234","messageId":"235","endLine":198,"endColumn":21},{"ruleId":"259","severity":1,"message":"260","line":215,"column":6,"nodeType":"261","endLine":215,"endColumn":19,"suggestions":"262"},{"ruleId":"263","severity":1,"message":"264","line":232,"column":27,"nodeType":"265","messageId":"266","endLine":232,"endColumn":29},{"ruleId":"259","severity":1,"message":"267","line":263,"column":6,"nodeType":"261","endLine":263,"endColumn":18,"suggestions":"268"},{"ruleId":"269","severity":1,"message":"270","line":437,"column":33,"nodeType":"271","messageId":"272","endLine":437,"endColumn":35},{"ruleId":"232","severity":1,"message":"273","line":444,"column":9,"nodeType":"234","messageId":"235","endLine":444,"endColumn":33},{"ruleId":"269","severity":1,"message":"270","line":491,"column":121,"nodeType":"271","messageId":"272","endLine":491,"endColumn":123},{"ruleId":"269","severity":1,"message":"270","line":495,"column":75,"nodeType":"271","messageId":"272","endLine":495,"endColumn":77},{"ruleId":"269","severity":1,"message":"274","line":550,"column":34,"nodeType":"271","messageId":"272","endLine":550,"endColumn":36},{"ruleId":"263","severity":1,"message":"275","line":575,"column":42,"nodeType":"276","messageId":"266","endLine":575,"endColumn":51},{"ruleId":"269","severity":1,"message":"270","line":577,"column":76,"nodeType":"271","messageId":"272","endLine":577,"endColumn":78},{"ruleId":"263","severity":1,"message":"275","line":593,"column":41,"nodeType":"276","messageId":"266","endLine":593,"endColumn":50},{"ruleId":"269","severity":1,"message":"274","line":595,"column":19,"nodeType":"271","messageId":"272","endLine":595,"endColumn":21},{"ruleId":"269","severity":1,"message":"270","line":598,"column":75,"nodeType":"271","messageId":"272","endLine":598,"endColumn":77},{"ruleId":"263","severity":1,"message":"277","line":660,"column":44,"nodeType":"265","messageId":"278","endLine":660,"endColumn":46},{"ruleId":"263","severity":1,"message":"277","line":698,"column":47,"nodeType":"265","messageId":"278","endLine":698,"endColumn":49},{"ruleId":"263","severity":1,"message":"277","line":720,"column":104,"nodeType":"265","messageId":"278","endLine":720,"endColumn":106},{"ruleId":"269","severity":1,"message":"270","line":721,"column":42,"nodeType":"271","messageId":"272","endLine":721,"endColumn":44},{"ruleId":"269","severity":1,"message":"274","line":858,"column":71,"nodeType":"271","messageId":"272","endLine":858,"endColumn":73},{"ruleId":"269","severity":1,"message":"274","line":860,"column":50,"nodeType":"271","messageId":"272","endLine":860,"endColumn":52},{"ruleId":"269","severity":1,"message":"274","line":862,"column":84,"nodeType":"271","messageId":"272","endLine":862,"endColumn":86},{"ruleId":"279","severity":1,"message":"280","line":874,"column":72,"nodeType":"281","endLine":874,"endColumn":107},{"ruleId":"269","severity":1,"message":"274","line":877,"column":74,"nodeType":"271","messageId":"272","endLine":877,"endColumn":76},{"ruleId":"269","severity":1,"message":"274","line":893,"column":86,"nodeType":"271","messageId":"272","endLine":893,"endColumn":88},{"ruleId":"279","severity":1,"message":"280","line":905,"column":58,"nodeType":"281","endLine":905,"endColumn":86},{"ruleId":"269","severity":1,"message":"274","line":906,"column":76,"nodeType":"271","messageId":"272","endLine":906,"endColumn":78},{"ruleId":"269","severity":1,"message":"274","line":928,"column":69,"nodeType":"271","messageId":"272","endLine":928,"endColumn":71},{"ruleId":"269","severity":1,"message":"274","line":930,"column":48,"nodeType":"271","messageId":"272","endLine":930,"endColumn":50},{"ruleId":"269","severity":1,"message":"274","line":932,"column":86,"nodeType":"271","messageId":"272","endLine":932,"endColumn":88},{"ruleId":"269","severity":1,"message":"274","line":948,"column":72,"nodeType":"271","messageId":"272","endLine":948,"endColumn":74},{"ruleId":"269","severity":1,"message":"274","line":976,"column":88,"nodeType":"271","messageId":"272","endLine":976,"endColumn":90},{"ruleId":"269","severity":1,"message":"274","line":994,"column":74,"nodeType":"271","messageId":"272","endLine":994,"endColumn":76},{"ruleId":"282","severity":1,"message":"283","line":1075,"column":13,"nodeType":"284","endLine":1084,"endColumn":15},{"ruleId":"282","severity":1,"message":"283","line":1104,"column":25,"nodeType":"284","endLine":1111,"endColumn":27},{"ruleId":"263","severity":1,"message":"264","line":11,"column":31,"nodeType":"265","messageId":"266","endLine":11,"endColumn":33},{"ruleId":"269","severity":1,"message":"270","line":12,"column":27,"nodeType":"271","messageId":"272","endLine":12,"endColumn":29},{"ruleId":"263","severity":1,"message":"264","line":67,"column":31,"nodeType":"265","messageId":"266","endLine":67,"endColumn":33},{"ruleId":"269","severity":1,"message":"274","line":70,"column":35,"nodeType":"271","messageId":"272","endLine":70,"endColumn":37},{"ruleId":"269","severity":1,"message":"274","line":70,"column":74,"nodeType":"271","messageId":"272","endLine":70,"endColumn":76},{"ruleId":"269","severity":1,"message":"274","line":72,"column":32,"nodeType":"271","messageId":"272","endLine":72,"endColumn":34},{"ruleId":"269","severity":1,"message":"274","line":72,"column":71,"nodeType":"271","messageId":"272","endLine":72,"endColumn":73},{"ruleId":"263","severity":1,"message":"264","line":100,"column":33,"nodeType":"265","messageId":"266","endLine":100,"endColumn":35},{"ruleId":"232","severity":1,"message":"285","line":124,"column":10,"nodeType":"234","messageId":"235","endLine":124,"endColumn":21},{"ruleId":"232","severity":1,"message":"286","line":2,"column":16,"nodeType":"234","messageId":"235","endLine":2,"endColumn":18},{"ruleId":"287","replacedBy":"288"},{"ruleId":"289","replacedBy":"290"},{"ruleId":"287","replacedBy":"291"},{"ruleId":"289","replacedBy":"292"},{"ruleId":"232","severity":1,"message":"293","line":1,"column":35,"nodeType":"234","messageId":"235","endLine":1,"endColumn":44},{"ruleId":"232","severity":1,"message":"286","line":5,"column":10,"nodeType":"234","messageId":"235","endLine":5,"endColumn":12},{"ruleId":"232","severity":1,"message":"294","line":10,"column":18,"nodeType":"234","messageId":"235","endLine":10,"endColumn":29},{"ruleId":"232","severity":1,"message":"295","line":13,"column":20,"nodeType":"234","messageId":"235","endLine":13,"endColumn":31},{"ruleId":"232","severity":1,"message":"296","line":5,"column":17,"nodeType":"234","messageId":"235","endLine":5,"endColumn":23},{"ruleId":"259","severity":1,"message":"260","line":24,"column":6,"nodeType":"261","endLine":24,"endColumn":18,"suggestions":"297"},{"ruleId":"232","severity":1,"message":"298","line":32,"column":18,"nodeType":"234","messageId":"235","endLine":32,"endColumn":30},{"ruleId":"287","replacedBy":"299"},{"ruleId":"289","replacedBy":"300"},{"ruleId":"232","severity":1,"message":"301","line":1,"column":38,"nodeType":"234","messageId":"235","endLine":1,"endColumn":44},{"ruleId":"232","severity":1,"message":"302","line":2,"column":10,"nodeType":"234","messageId":"235","endLine":2,"endColumn":15},{"ruleId":"232","severity":1,"message":"303","line":5,"column":8,"nodeType":"234","messageId":"235","endLine":5,"endColumn":14},{"ruleId":"232","severity":1,"message":"237","line":10,"column":10,"nodeType":"234","messageId":"235","endLine":10,"endColumn":18},{"ruleId":"232","severity":1,"message":"304","line":10,"column":20,"nodeType":"234","messageId":"235","endLine":10,"endColumn":27},{"ruleId":"259","severity":1,"message":"305","line":69,"column":6,"nodeType":"261","endLine":69,"endColumn":8,"suggestions":"306"},{"ruleId":"259","severity":1,"message":"305","line":77,"column":6,"nodeType":"261","endLine":77,"endColumn":8,"suggestions":"307"},{"ruleId":"269","severity":1,"message":"270","line":99,"column":68,"nodeType":"271","messageId":"272","endLine":99,"endColumn":70},{"ruleId":"269","severity":1,"message":"270","line":103,"column":68,"nodeType":"271","messageId":"272","endLine":103,"endColumn":70},{"ruleId":"269","severity":1,"message":"270","line":107,"column":76,"nodeType":"271","messageId":"272","endLine":107,"endColumn":78},{"ruleId":"269","severity":1,"message":"270","line":111,"column":76,"nodeType":"271","messageId":"272","endLine":111,"endColumn":78},{"ruleId":"269","severity":1,"message":"270","line":120,"column":68,"nodeType":"271","messageId":"272","endLine":120,"endColumn":70},{"ruleId":"269","severity":1,"message":"270","line":124,"column":68,"nodeType":"271","messageId":"272","endLine":124,"endColumn":70},{"ruleId":"282","severity":1,"message":"283","line":133,"column":11,"nodeType":"284","endLine":143,"endColumn":15},{"ruleId":"259","severity":1,"message":"308","line":204,"column":6,"nodeType":"261","endLine":204,"endColumn":8,"suggestions":"309"},{"ruleId":"269","severity":1,"message":"270","line":211,"column":56,"nodeType":"271","messageId":"272","endLine":211,"endColumn":58},{"ruleId":"269","severity":1,"message":"270","line":215,"column":56,"nodeType":"271","messageId":"272","endLine":215,"endColumn":58},{"ruleId":"282","severity":1,"message":"283","line":221,"column":7,"nodeType":"284","endLine":228,"endColumn":9},{"ruleId":"232","severity":1,"message":"257","line":240,"column":10,"nodeType":"234","messageId":"235","endLine":240,"endColumn":15},{"ruleId":"232","severity":1,"message":"310","line":245,"column":10,"nodeType":"234","messageId":"235","endLine":245,"endColumn":21},{"ruleId":"232","severity":1,"message":"311","line":246,"column":10,"nodeType":"234","messageId":"235","endLine":246,"endColumn":21},{"ruleId":"232","severity":1,"message":"312","line":246,"column":23,"nodeType":"234","messageId":"235","endLine":246,"endColumn":37},{"ruleId":"232","severity":1,"message":"313","line":250,"column":10,"nodeType":"234","messageId":"235","endLine":250,"endColumn":22},{"ruleId":"232","severity":1,"message":"314","line":250,"column":24,"nodeType":"234","messageId":"235","endLine":250,"endColumn":39},{"ruleId":"259","severity":1,"message":"260","line":290,"column":6,"nodeType":"261","endLine":290,"endColumn":18,"suggestions":"315"},{"ruleId":"263","severity":1,"message":"264","line":311,"column":29,"nodeType":"265","messageId":"266","endLine":311,"endColumn":31},{"ruleId":"269","severity":1,"message":"270","line":312,"column":30,"nodeType":"271","messageId":"272","endLine":312,"endColumn":32},{"ruleId":"269","severity":1,"message":"270","line":315,"column":35,"nodeType":"271","messageId":"272","endLine":315,"endColumn":37},{"ruleId":"259","severity":1,"message":"260","line":324,"column":6,"nodeType":"261","endLine":324,"endColumn":26,"suggestions":"316"},{"ruleId":"269","severity":1,"message":"270","line":330,"column":86,"nodeType":"271","messageId":"272","endLine":330,"endColumn":88},{"ruleId":"282","severity":1,"message":"283","line":398,"column":13,"nodeType":"284","endLine":407,"endColumn":15},{"ruleId":"263","severity":1,"message":"277","line":457,"column":46,"nodeType":"265","messageId":"278","endLine":457,"endColumn":48},{"ruleId":"232","severity":1,"message":"317","line":4,"column":15,"nodeType":"234","messageId":"235","endLine":4,"endColumn":25},{"ruleId":"232","severity":1,"message":"318","line":11,"column":10,"nodeType":"234","messageId":"235","endLine":11,"endColumn":18},{"ruleId":"232","severity":1,"message":"295","line":11,"column":20,"nodeType":"234","messageId":"235","endLine":11,"endColumn":31},{"ruleId":"287","replacedBy":"319"},{"ruleId":"289","replacedBy":"320"},{"ruleId":"232","severity":1,"message":"286","line":1,"column":9,"nodeType":"234","messageId":"235","endLine":1,"endColumn":11},{"ruleId":"321","severity":1,"message":"322","line":12,"column":1,"nodeType":"323","endLine":53,"endColumn":2},{"ruleId":"324","severity":1,"message":"325","line":13,"column":5,"nodeType":"326","messageId":"327","endLine":51,"endColumn":6},{"ruleId":"232","severity":1,"message":"328","line":5,"column":14,"nodeType":"234","messageId":"235","endLine":5,"endColumn":21},{"ruleId":"232","severity":1,"message":"295","line":16,"column":20,"nodeType":"234","messageId":"235","endLine":16,"endColumn":31},{"ruleId":"259","severity":1,"message":"260","line":29,"column":6,"nodeType":"261","endLine":29,"endColumn":18,"suggestions":"329"},{"ruleId":"321","severity":1,"message":"322","line":7,"column":1,"nodeType":"323","endLine":46,"endColumn":2},{"ruleId":"324","severity":1,"message":"325","line":8,"column":3,"nodeType":"326","messageId":"327","endLine":43,"endColumn":4},{"ruleId":"232","severity":1,"message":"330","line":1,"column":17,"nodeType":"234","messageId":"235","endLine":1,"endColumn":25},{"ruleId":"232","severity":1,"message":"331","line":3,"column":9,"nodeType":"234","messageId":"235","endLine":3,"endColumn":18},{"ruleId":"232","severity":1,"message":"332","line":5,"column":10,"nodeType":"234","messageId":"235","endLine":5,"endColumn":16},{"ruleId":"232","severity":1,"message":"333","line":5,"column":33,"nodeType":"234","messageId":"235","endLine":5,"endColumn":41},{"ruleId":"232","severity":1,"message":"303","line":12,"column":8,"nodeType":"234","messageId":"235","endLine":12,"endColumn":14},"no-unused-vars","'Dropdown' is defined but never used.","Identifier","unusedVar","'DropdownButton' is defined but never used.","'faCoffee' is defined but never used.","'firebase' is defined but never used.","'userDocIds' is assigned a value but never used.","'id' is assigned a value but never used.","'profileImageUrl' is assigned a value but never used.","'setProfileImageUrl' is assigned a value but never used.","'invalidate5' is assigned a value but never used.","'setInvalidate5' is assigned a value but never used.","'chosenEmoji' is assigned a value but never used.","'groupInfo' is assigned a value but never used.","'setGroupInfo' is assigned a value but never used.","'invalidate7' is assigned a value but never used.","'groupImageUrl' is assigned a value but never used.","'selectedEmoji' is assigned a value but never used.","'currentMessageEmojiGroup' is assigned a value but never used.","'currentKey' is assigned a value but never used.","'setCurrentKey' is assigned a value but never used.","'invalidate9' is assigned a value but never used.","'setInvalidate9' is assigned a value but never used.","'selectedMember' is assigned a value but never used.","'error' is assigned a value but never used.","'classesModal' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'currentUser.uid'. Either include it or remove the dependency array.","ArrayExpression",["334"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","React Hook useEffect has missing dependencies: 'currentUser.uid' and 'dispatch'. Either include them or remove the dependency array.",["335"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","'handleSelectFromDataList' is assigned a value but never used.","Expected '===' and instead saw '=='.","Array.prototype.map() expects a return value from function.","FunctionExpression","Array.prototype.map() expects a value to be returned at the end of arrow function.","expectedAtEnd","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'arrayEquals' is defined but never used.","'db' is defined but never used.","no-native-reassign",["336"],"no-negated-in-lhs",["337"],["336"],["337"],"'useEffect' is defined but never used.","'currentUser' is assigned a value but never used.","'setVerified' is assigned a value but never used.","'Button' is defined but never used.",["338"],"'handleLogout' is defined but never used.",["336"],["337"],"'useRef' is defined but never used.","'Alert' is defined but never used.","'Header' is defined but never used.","'faReply' is defined but never used.","React Hook useEffect has a missing dependency: 'docId'. Either include it or remove the dependency array.",["339"],["340"],"React Hook useEffect has a missing dependency: 'friendId'. Either include it or remove the dependency array.",["341"],"'invalidate2' is assigned a value but never used.","'invalidate3' is assigned a value but never used.","'setInvalidate3' is assigned a value but never used.","'selectedFile' is assigned a value but never used.","'setSelectedFile' is assigned a value but never used.",["342"],["343"],"'useHistory' is defined but never used.","'verified' is assigned a value but never used.",["336"],["337"],"import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'storage' is defined but never used.",["344"],"'useState' is defined but never used.","'Container' is defined but never used.","'Router' is defined but never used.","'Redirect' is defined but never used.",{"desc":"345","fix":"346"},{"desc":"347","fix":"348"},"no-global-assign","no-unsafe-negation",{"desc":"349","fix":"350"},{"desc":"351","fix":"352"},{"desc":"351","fix":"353"},{"desc":"354","fix":"355"},{"desc":"349","fix":"356"},{"desc":"357","fix":"358"},{"desc":"349","fix":"359"},"Update the dependencies array to be: [currentUser.uid, invalidate2]",{"range":"360","text":"361"},"Update the dependencies array to be: [currentUser.uid, dispatch, invalidate]",{"range":"362","text":"363"},"Update the dependencies array to be: [currentUser.uid, invalidate]",{"range":"364","text":"365"},"Update the dependencies array to be: [docId]",{"range":"366","text":"367"},{"range":"368","text":"367"},"Update the dependencies array to be: [friendId]",{"range":"369","text":"370"},{"range":"371","text":"365"},"Update the dependencies array to be: [currentUser.uid, listPendingFriends]",{"range":"372","text":"373"},{"range":"374","text":"365"},[8075,8088],"[currentUser.uid, invalidate2]",[9421,9433],"[currentUser.uid, dispatch, invalidate]",[769,781],"[currentUser.uid, invalidate]",[2056,2058],"[docId]",[2248,2250],[6327,6329],"[friendId]",[9105,9117],[10056,10076],"[currentUser.uid, listPendingFriends]",[1071,1083]]